[{"/Users/gong-yeongbin/project/artalleys-gn/apidoc-define.ts":"1","/Users/gong-yeongbin/project/artalleys-gn/handler.ts":"2","/Users/gong-yeongbin/project/artalleys-gn/src/connection/Connection.ts":"3","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Entity.ts":"4","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Post.ts":"5","/Users/gong-yeongbin/project/artalleys-gn/src/entity/PostNormal.ts":"6","/Users/gong-yeongbin/project/artalleys-gn/src/entity/PostBusiness.ts":"7","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Image.ts":"8","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Location.ts":"9","/Users/gong-yeongbin/project/artalleys-gn/src/entity/User.ts":"10","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Comment.ts":"11","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Chat.ts":"12","/Users/gong-yeongbin/project/artalleys-gn/serverless.ts":"13","/Users/gong-yeongbin/project/artalleys-gn/services/business/handler.ts":"14","/Users/gong-yeongbin/project/artalleys-gn/services/util/aws.ts":"15","/Users/gong-yeongbin/project/artalleys-gn/services/util/util.ts":"16","/Users/gong-yeongbin/project/artalleys-gn/src/dto/BusinessDto.ts":"17","/Users/gong-yeongbin/project/artalleys-gn/services/util/http.ts":"18","/Users/gong-yeongbin/project/artalleys-gn/services/chat-socket/handler.ts":"19","/Users/gong-yeongbin/project/artalleys-gn/services/comment/handler.ts":"20","/Users/gong-yeongbin/project/artalleys-gn/src/dto/CommentDto.ts":"21","/Users/gong-yeongbin/project/artalleys-gn/src/dto/ReplyDto.ts":"22","/Users/gong-yeongbin/project/artalleys-gn/services/feed/handler.ts":"23","/Users/gong-yeongbin/project/artalleys-gn/src/dto/PostFeedDto.ts":"24","/Users/gong-yeongbin/project/artalleys-gn/src/dto/BusinessFeedDto.ts":"25","/Users/gong-yeongbin/project/artalleys-gn/services/post/handler.ts":"26","/Users/gong-yeongbin/project/artalleys-gn/src/dto/PostDto.ts":"27","/Users/gong-yeongbin/project/artalleys-gn/src/index.ts":"28"},{"size":3210,"mtime":1605065494638,"results":"29","hashOfConfig":"30"},{"size":435,"mtime":1606805280875,"results":"31","hashOfConfig":"30"},{"size":2814,"mtime":1606804701741,"results":"32","hashOfConfig":"30"},{"size":408,"mtime":1606186607126,"results":"33","hashOfConfig":"30"},{"size":1520,"mtime":1606802452424,"results":"34","hashOfConfig":"30"},{"size":934,"mtime":1606802401887,"results":"35","hashOfConfig":"30"},{"size":983,"mtime":1606802423056,"results":"36","hashOfConfig":"30"},{"size":649,"mtime":1606802888253,"results":"37","hashOfConfig":"30"},{"size":685,"mtime":1606802899805,"results":"38","hashOfConfig":"30"},{"size":849,"mtime":1606705559217,"results":"39","hashOfConfig":"30"},{"size":876,"mtime":1605679756001,"results":"40","hashOfConfig":"30"},{"size":720,"mtime":1606802050258,"results":"41","hashOfConfig":"30"},{"size":7627,"mtime":1606718793724,"results":"42","hashOfConfig":"30"},{"size":6383,"mtime":1606449742637,"results":"43","hashOfConfig":"30"},{"size":1261,"mtime":1605259163920,"results":"44","hashOfConfig":"30"},{"size":123,"mtime":1605595531353,"results":"45","hashOfConfig":"30"},{"size":1772,"mtime":1605753831604,"results":"46","hashOfConfig":"30"},{"size":658,"mtime":1605167893381,"results":"47","hashOfConfig":"30"},{"size":2893,"mtime":1606802089732,"results":"48","hashOfConfig":"30"},{"size":8830,"mtime":1605752481218,"results":"49","hashOfConfig":"30"},{"size":561,"mtime":1605691227865,"results":"50","hashOfConfig":"30"},{"size":779,"mtime":1605752353882,"results":"51","hashOfConfig":"30"},{"size":12601,"mtime":1605866799111,"results":"52","hashOfConfig":"30"},{"size":959,"mtime":1605858223771,"results":"53","hashOfConfig":"30"},{"size":1070,"mtime":1605668972603,"results":"54","hashOfConfig":"30"},{"size":11072,"mtime":1606802494651,"results":"55","hashOfConfig":"30"},{"size":1609,"mtime":1605668875234,"results":"56","hashOfConfig":"30"},{"size":592,"mtime":1606805269790,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pm5omk",{"filePath":"60","messages":"61","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":6,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":26,"warningCount":4,"fixableErrorCount":12,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":13,"warningCount":7,"fixableErrorCount":2,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":14,"warningCount":5,"fixableErrorCount":4,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":11,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":45,"warningCount":5,"fixableErrorCount":8,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":32,"warningCount":17,"fixableErrorCount":18,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},"/Users/gong-yeongbin/project/artalleys-gn/apidoc-define.ts",[],"/Users/gong-yeongbin/project/artalleys-gn/handler.ts",["135","136"],"import { APIGatewayProxyHandler } from \"aws-lambda\";\nimport \"source-map-support/register\";\n\nconst { DB_HOST } = process.env;\nexport const hello: APIGatewayProxyHandler = async (_context) => {\n  console.log(DB_HOST);\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\n      {\n        message:\n          \"Go Serverless Webpack (Typescript) v1.0! Your function executed successfully!!\",\n      },\n      null,\n      2\n    ),\n  };\n};\n","/Users/gong-yeongbin/project/artalleys-gn/src/connection/Connection.ts",["137","138","139","140","141","142","143","144","145","146","147","148"],"import { Integer } from \"aws-sdk/clients/apigateway\";\nimport {\n  ConnectionOptions,\n  Connection,\n  getConnectionManager,\n  DefaultNamingStrategy,\n  DatabaseType,\n} from \"typeorm\";\n\nimport {\n  Post,\n  User,\n  Location,\n  Image,\n  PostNormal,\n  PostBusiness,\n  Comment,\n  Chat,\n} from \"../entity/Entity\";\n\nimport { RelationLoader } from \"typeorm/query-builder/RelationLoader\";\nimport { RelationIdLoader } from \"typeorm/query-builder/RelationIdLoader\";\n\nconst {\n  DB_TYPE,\n  DB_HOST,\n  DB_PORT,\n  DB_USERNAME,\n  DB_PASSWORD,\n  DB_DATABASE,\n  DB_SYNCHRONIZE,\n} = process.env;\nconst entity = [\n  User,\n  Post,\n  Location,\n  Image,\n  PostNormal,\n  PostBusiness,\n  Comment,\n  Chat,\n];\n\nconst CONNECTION_OPTIONS: ConnectionOptions = {\n  type: DB_TYPE as \"mysql\" | \"mariadb\",\n  host: \"artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com\",\n  // host: \"localhost\",\n  port: 3306,\n  username: DB_USERNAME,\n  password: \"neibors1!\",\n  // password: DB_PASSWORD,\n  database: DB_DATABASE,\n  synchronize: true,\n  entities: entity,\n};\n\n/**\n * Establishes and returns a connection to the database server. If an existing\n * connection is found, the connection is reused.\n *\n * @see https://github.com/typeorm/typeorm/issues/2598#issue-345445322\n * @export\n * @returns {Promise<Connection>}\n */\nexport async function getDatabaseConnection(): Promise<Connection> {\n  try {\n    console.log(\"Establishing connection...\");\n    const connectionManager = getConnectionManager();\n    let connection: Connection;\n\n    if (connectionManager.has(\"default\")) {\n      console.log(\"Reusing existion connection...\");\n      connection = injectConnectionOptions(\n        connectionManager.get(),\n        CONNECTION_OPTIONS\n      );\n    } else {\n      connection = connectionManager.create(CONNECTION_OPTIONS);\n      await connection.connect();\n    }\n\n    console.log(\"Connection established\");\n    return connection;\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\n/**\n * Injects missing / outdated connection options into an existing database\n * connection.\n *\n * @see https://github.com/typeorm/typeorm/issues/2598#issue-345445322\n * @param {Connection} connection\n * @param {ConnectionOptions} CONNECTION_OPTIONS\n * @returns {Connection}\n */\nfunction injectConnectionOptions(\n  connection: Connection,\n  CONNECTION_OPTIONS: ConnectionOptions\n): Connection {\n  // @ts-ignore\n  connection.options = CONNECTION_OPTIONS;\n  // @ts-ignore\n  connection.manager = connection.createEntityManager();\n  // @ts-ignore\n  connection.namingStrategy =\n    connection.options.namingStrategy || new DefaultNamingStrategy();\n  // @ts-ignore\n  connection.relationLoader = new RelationLoader(connection);\n  // @ts-ignore\n  connection.relationIdLoader = new RelationIdLoader(connection);\n  // @ts-ignore\n  connection.buildMetadatas();\n\n  return connection;\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Entity.ts",[],"/Users/gong-yeongbin/project/artalleys-gn/src/entity/Post.ts",["149"],"import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToOne,\n  OneToMany,\n  JoinColumn,\n} from \"typeorm\";\nimport {\n  Location,\n  Image,\n  PostNormal,\n  PostBusiness,\n  Chat,\n} from \"../entity/Entity\";\n\n@Entity(\"post\")\nexport default class Post {\n  @PrimaryGeneratedColumn({ name: \"id\", type: \"bigint\" })\n  id: number;\n\n  @Column({ name: \"post_id\", type: \"nvarchar\" })\n  postId: string;\n\n  @Column({ name: \"title\", type: \"nvarchar\", length: 30 })\n  title: string;\n\n  @Column({ name: \"view\", type: \"integer\", default: 0 })\n  view: number;\n\n  @Column({ name: \"number\", type: \"integer\", nullable: true })\n  number: number;\n\n  @CreateDateColumn({ name: \"created_at\" })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: \"updated_at\" })\n  updatedAt: Date;\n\n  @OneToOne(() => Location)\n  postLocation: Location;\n\n  @OneToOne(() => PostNormal, (postNormal) => postNormal.post, {\n    cascade: [\"insert\", \"update\", \"remove\"],\n  })\n  normal: PostNormal;\n\n  @OneToOne(() => PostBusiness, {\n    cascade: [\"insert\", \"update\", \"remove\"],\n  })\n  business: PostBusiness;\n\n  @OneToOne(() => Location, {\n    cascade: [\"insert\", \"update\", \"remove\"],\n  })\n  location: Location;\n\n  @OneToMany(() => Image, (image) => image.post, {\n    cascade: [\"insert\", \"update\", \"remove\"],\n  })\n  postImage: Image[];\n\n  @OneToMany(() => Chat, (chat) => chat.post, {\n    cascade: [\"insert\", \"update\", \"remove\"],\n  })\n  chat: Chat[];\n\n  @Column({ name: \"hide\", type: \"boolean\", default: false })\n  hide: boolean;\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/entity/PostNormal.ts",[],"/Users/gong-yeongbin/project/artalleys-gn/src/entity/PostBusiness.ts",["150","151"],"import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToOne,\n  JoinColumn,\n} from \"typeorm\";\nimport { Post } from \"../entity/Entity\";\n\n@Entity(\"post_business\")\nexport default class PostBusiness {\n  @PrimaryGeneratedColumn({ name: \"id\", type: \"bigint\" })\n  id: number;\n\n  @Column({ name: \"detail_title\" })\n  detailTitle: string;\n\n  @Column({ name: \"address\" })\n  address: string;\n\n  @Column({ name: \"start_time\", type: \"integer\", default: 0 })\n  startTime: number;\n\n  @Column({ name: \"end_time\", type: \"integer\", default: 0 })\n  endTime: number;\n\n  @Column({ name: \"homepage\" })\n  homepage: string;\n\n  @Column({\n    name: \"working_hours_descriptions\",\n    type: \"nvarchar\",\n    length: 1024,\n  })\n  workingHoursDescriptions: string;\n\n  @Column({\n    name: \"descriptions\",\n    type: \"nvarchar\",\n    length: 300,\n  })\n  descriptions: string;\n\n  @OneToOne(() => Post, (post) => post.business)\n  @JoinColumn({ name: \"post\" })\n  post: Post;\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Image.ts",["152"],"import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  Unique,\n} from \"typeorm\";\n\nimport { Post } from \"../entity/Entity\";\n\n@Entity(\"image\")\nexport default class Image {\n  @PrimaryGeneratedColumn({ name: \"id\", type: \"bigint\" })\n  id: number;\n\n  @Column({ name: \"url\", type: \"nvarchar\", nullable: false })\n  url: string;\n\n  @CreateDateColumn({ name: \"created_at\" })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: \"updated_at\" })\n  updatedAt: Date;\n\n  @ManyToOne(() => Post, (post) => post.postImage, {\n    onDelete: \"CASCADE\",\n  })\n  @JoinColumn({ name: \"post\" })\n  post: Post;\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Location.ts",["153"],"import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToOne,\n  JoinColumn,\n  Unique,\n} from \"typeorm\";\nimport { Post } from \"../entity/Entity\";\n\n@Entity(\"location\")\nexport default class Location {\n  @PrimaryGeneratedColumn({ name: \"id\", type: \"bigint\" })\n  id: number;\n\n  @Column({ name: \"longtitude\", type: \"integer\" })\n  longtitude: number;\n\n  @Column({ name: \"latitude\", type: \"integer\" })\n  latitude: number;\n\n  @CreateDateColumn({ name: \"created_at\" })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: \"updated_at\" })\n  updatedAt: Date;\n\n  @OneToOne(() => Post, (post) => post.location)\n  @JoinColumn({ name: \"post\" })\n  post: Post;\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/entity/User.ts",[],"/Users/gong-yeongbin/project/artalleys-gn/src/entity/Comment.ts",["154","155"],"import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\n\nimport { Post } from \"../entity/Entity\";\n\n@Entity(\"comment\")\nexport default class Comment {\n  @PrimaryGeneratedColumn({ name: \"id\", type: \"bigint\" })\n  id: number;\n\n  @ManyToOne((_) => Post, { onDelete: \"CASCADE\" })\n  @JoinColumn({ name: \"post_id\" })\n  post: Post;\n\n  @Column({ name: \"comment_id\", type: \"nvarchar\" })\n  commentId: string;\n\n  @ManyToOne((_) => Comment, { onDelete: \"SET NULL\" })\n  @JoinColumn({ name: \"reply_id\" })\n  reply: Comment[];\n\n  @Column({ name: \"message\", type: \"nvarchar\" })\n  message: string;\n\n  @CreateDateColumn({ name: \"created_at\" })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: \"updated_at\" })\n  updatedAt: Date;\n\n  @Column({ name: \"deleted\", type: \"boolean\", default: false })\n  deleted: boolean;\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/entity/Chat.ts",[],"/Users/gong-yeongbin/project/artalleys-gn/serverless.ts",[],"/Users/gong-yeongbin/project/artalleys-gn/services/business/handler.ts",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185"],"import { APIGatewayEvent, Context, ProxyResult } from \"aws-lambda\";\nimport { getDatabaseConnection } from \"../../src/connection/Connection\";\nimport { putObject, sendMessage } from \"../util/aws\";\nimport { Post, Image, Location, PostBusiness } from \"../../src/entity/Entity\";\nimport { name } from \"../util/util\";\nimport { BusinessBuilder, BusinessData } from \"../../src/dto/BusinessDto\";\n\nconst { CLOUDFRONT_IMAGE } = process.env;\n\n/**\n * @api {put}  /post/:uid/createPost     Create Business Post\n * @apiName Create Business Post\n * @apiGroup Post\n *\n * @apiParam (PathParam) {String} uid                                   uid\n * @apiParam (Body) {String{30}}  title                                 title\n * @apiParam (Body) {String}  detailTitle                               detailTitle\n * @apiParam (Body) {Object} location                                   location\n * @apiParam (Body) {Object} location.latitude                          location latitude\n * @apiParam (Body) {Object} location.longtitude                        location longtitude\n * @apiParam (Body) {String} address                                    address\n * @apiParam (Body) {Number} number                                     number\n * @apiParam (Body) {Object} workingHours                               workingHours\n * @apiParam (Body) {Object} workingHours.start                         workingHours start\n * @apiParam (Body) {Object} workingHours.end                           workingHours end\n * @apiParam (Body) {String} workingHoursDescriptions                   workingHoursDescriptions\n * @apiParam (Body) {String} homepage                                   homepage\n * @apiParam (Body) {String{300}} descriptions                          post descriptions\n * @apiParam (Body) {base64} image                                      post image\n *\n *\n * @apiParamExample {json} Request Body\n{\n\t\"title\": \"business title\",\n\t\"detailTitle\": \"organic food\",\n\t\"location\": {\n\t\t\t\t\t\t\t\"longtitude\": 12.123,\n\t\t\t\t\t\t\t\"latitude\": 13.123\n\t\t\t\t\t\t },\n\t\"address\": \"seoul\",\n\t\"number\": 2112341234,\n  \"workingHours\": {\n\t\t\t\t\t\t\t\t\t\t\"start\": 1000,\n\t\t\t\t\t\t\t\t\t\t\"end\": 2200\n\t\t\t\t\t\t\t\t\t},\n\t\"workingHoursDescriptions\":\"testestsetestts\",\n\t\"homepage\":\"www.asdf.com\",\n\t\"descriptions\":\"hahahahahahah\",\n\t\"image\": [\"testtesttesttest........\"]\n }\n * @apiSuccess (200 OK) {String} NoContent                              Success\n **/\nexport const createBusiness = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n  const postBusinessRepository = connection.getRepository(PostBusiness);\n  const imageRepository = connection.getRepository(Image);\n\n  const uid: string = event.pathParameters[\"uid\"];\n  const postId = name(10);\n  const data: any = JSON.parse(event.body);\n\n  let post: Post = new Post();\n  let postBusiness: PostBusiness = new PostBusiness();\n  let location: Location = new Location();\n\n  let { title, number }: Post = data;\n\n  let {\n    detailTitle,\n    address,\n    descriptions,\n    workingHoursDescriptions,\n    homepage,\n  }: PostBusiness = data;\n\n  location.longtitude = data.location.longtitude;\n  location.latitude = data.location.latitude;\n\n  post.postId = postId;\n  post.title = title;\n  post.number = number;\n  // post.postLocation = location;\n  await postRepository.save(post);\n\n  postBusiness.detailTitle = detailTitle;\n  postBusiness.address = address;\n  postBusiness.startTime = data.workingHours.start;\n  postBusiness.endTime = data.workingHours.end;\n  postBusiness.descriptions = descriptions;\n  postBusiness.workingHoursDescriptions = workingHoursDescriptions;\n  postBusiness.homepage = homepage;\n  // postBusiness.post = post;\n  postBusinessRepository.save(postBusiness);\n\n  for (let index in data.image) {\n    let imageName = name(8);\n\n    await imageRepository\n      .createQueryBuilder()\n      .insert()\n      .into(Image)\n      .values({\n        post: post,\n        url: `https://artalleys-gn-image-bucket.s3.us-east-2.amazonaws.com/${uid}/post/${postId}/origin/${imageName}.png`,\n      })\n      .execute();\n\n    const originalImage = Buffer.from(data.image[index], \"base64\");\n\n    await putObject(\n      originalImage,\n      `${uid}/post/${postId}/origin/${imageName}.png`\n    );\n    await sendMessage(`${uid}/post/${postId}/origin/${imageName}.png`);\n  }\n\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n\n/**\n * @api {get}  /post/:uid/:postId/getBusiness     Get Business Post\n * @apiName Get Business Post\n * @apiGroup Post\n *\n * @apiParam (PathParam) {String} uid                                   uid\n * @apiParam (PathParam) {String} postId                                postId\n *\n *\n * @apiParamExample {json} Response\n{\n  \"postId\": \"4f62a7cb423ac3ff3faf\",\n  \"title\": \"business title\",\n  \"view\": 0,\n  \"detailTitle\": \"organic food\",\n  \"address\": \"seoul\",\n  \"startTime\": 1000,\n  \"endTime\": 2200,\n  \"homePage\": \"www.asdf.com\",\n  \"workingHoursDescriptions\": \"testestsetestts\",\n  \"descriptions\": \"hahahahahahah\",\n  \"url\": [\n    \"d19j7dhfxgaxy7.cloudfront.net/testuid/post/4f62a7cb423ac3ff3faf/origin/65fe1202ae6419bd.png\"\n  ],\n  \"location\": {\n    \"longtitude\": 12,\n    \"latitude\": 13\n  },\n  \"createdAt\": \"2020-11-16T22:50:32.965Z\",\n  \"updatedAt\": \"2020-11-16T22:50:32.965Z\"\n}\n * @apiSuccess  (200 OK) {String} NoContent           Success\n * @apiError    (404 Not Found)   ResourceNotFound    This resource cannot be found\n **/\nexport const getBusiness = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const uid: string = event.pathParameters[\"uid\"];\n  const postId: string = event.pathParameters[\"postId\"];\n\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n  const postEntity = await postRepository\n    .createQueryBuilder(\"post\")\n    .leftJoinAndSelect(\"post.business\", \"business\")\n    .leftJoinAndSelect(\"post.postLocation\", \"postLocation\")\n    .leftJoinAndSelect(\"post.postImage\", \"postImage\")\n    .where(\"post.postId = :postId\", { postId: postId })\n    .getOne();\n\n  if (postEntity == null) {\n    return {\n      statusCode: 404,\n      body: \"null\",\n    };\n  }\n\n  const businessDto: BusinessData = new BusinessBuilder(postEntity)\n    .replaceHost(CLOUDFRONT_IMAGE)\n    .build();\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(businessDto),\n  };\n};\n","/Users/gong-yeongbin/project/artalleys-gn/services/util/aws.ts",["186","187","188","189","190"],"import * as AWS from \"aws-sdk\";\n\nconst {\n  BUCKET_NAME,\n  BUCKET_SERVICE_ENDPOINT,\n  SQS_IMAGE_RESIZE_ENDPOIN_URL,\n  SQS_IMAGE_RESIZE_QUEUE_URL,\n} = process.env;\n\nconst s3: AWS.S3 = new AWS.S3({\n  region: \"us-east-2\",\n  endpoint: BUCKET_SERVICE_ENDPOINT,\n});\n\nconst sqs: AWS.SQS = new AWS.SQS({\n  endpoint: SQS_IMAGE_RESIZE_ENDPOIN_URL,\n  apiVersion: \"2012-11-05\",\n});\n\nexport const putObject = async (data: Buffer, key: string) => {\n  await s3\n    .putObject({\n      Bucket: BUCKET_NAME,\n      Key: key,\n      Body: data,\n      ContentType: \"image/png\",\n    })\n    .promise();\n};\n\nexport const getObject = async (key: string) => {\n  return await s3\n    .getObject({\n      Bucket: BUCKET_NAME,\n      Key: key,\n    })\n    .promise();\n};\n\nexport const deleteObject = async (key: string) => {\n  await s3.deleteObject({ Bucket: BUCKET_NAME, Key: key }).promise();\n};\n\nexport const sendMessage = async (messageBody: string) => {\n  await sqs\n    .sendMessage({\n      MessageBody: messageBody,\n      QueueUrl: SQS_IMAGE_RESIZE_QUEUE_URL,\n    })\n    .promise();\n};\n\nexport const deleteMessage = async (receiptHandle: string) => {\n  await sqs\n    .deleteMessage({\n      QueueUrl: SQS_IMAGE_RESIZE_QUEUE_URL,\n      ReceiptHandle: receiptHandle,\n    })\n    .promise();\n};\n","/Users/gong-yeongbin/project/artalleys-gn/services/util/util.ts",["191"],"import * as crypto from \"crypto\";\n\nexport const name = (n: number) => {\n  return crypto.randomBytes(n).toString(\"hex\");\n};\n","/Users/gong-yeongbin/project/artalleys-gn/src/dto/BusinessDto.ts",["192"],"import { Post } from \"../entity/Entity\";\nimport { replaceHost } from \"../../services/util/http\";\ninterface Location {\n  longtitude: number;\n  latitude: number;\n}\nexport interface BusinessData {\n  postId: string;\n  title: string;\n  view?: number;\n  detailTitle?: string;\n  address?: string;\n  startTime?: number;\n  endTime?: number;\n  homePage?: string;\n  workingHoursDescriptions?: string;\n  descriptions?: string;\n  url: string[];\n  location: Location;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport class BusinessBuilder {\n  private _businessData: BusinessData;\n\n  constructor(post: Post) {\n    const postImage: string[] = [];\n    post.postImage.map((value, index) => {\n      postImage[index] = value.url;\n    });\n    const postLocation: Location = {\n      longtitude: post.postLocation.longtitude,\n      latitude: post.postLocation.latitude,\n    };\n    const businessData: BusinessData = {\n      postId: post.postId,\n      title: post.title,\n      view: post.view,\n      detailTitle: post.business.detailTitle,\n      address: post.business.address,\n      startTime: post.business.startTime,\n      endTime: post.business.endTime,\n      homePage: post.business.homepage,\n      workingHoursDescriptions: post.business.workingHoursDescriptions,\n      descriptions: post.business.descriptions,\n      url: postImage,\n      location: postLocation,\n      createdAt: post.createdAt,\n      updatedAt: post.updatedAt,\n    };\n\n    this._businessData = businessData;\n  }\n\n  public replaceHost(newHost: string): BusinessBuilder {\n    this._businessData.url.map((value, index) => {\n      this._businessData.url[index] = replaceHost(\n        this._businessData.url[index],\n        newHost\n      );\n    });\n    return this;\n  }\n\n  public build() {\n    return this._businessData;\n  }\n}\n","/Users/gong-yeongbin/project/artalleys-gn/services/util/http.ts",[],"/Users/gong-yeongbin/project/artalleys-gn/services/chat-socket/handler.ts",["193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212"],"import { APIGatewayEvent, ProxyResult, Context } from \"aws-lambda\";\nimport { ApiGatewayManagementApi } from \"aws-sdk\";\nimport { reverse } from \"dns\";\nimport { getDatabaseConnection } from \"../../src/connection/Connection\";\nimport { Chat, User, Post } from \"../../src/entity/Entity\";\n\n//connection -> token userId , receiveId\nexport const onConnect = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  console.log(\"@@@@ \", event);\n  const connectionId = event.requestContext.connectionId;\n  const uid: string = \"testid2\";\n  const connection = await getDatabaseConnection();\n  const userRepository = connection.getRepository(User);\n\n  const userEntity = await userRepository\n    .createQueryBuilder(\"User\")\n    .where(\"uid = :uid\", {\n      uid: uid,\n    })\n    .getOne();\n\n  if (userEntity == null) {\n    return {\n      statusCode: 404,\n      body: \"\",\n    };\n  }\n\n  if (\n    userEntity.connectionId == null ||\n    userEntity.connectionId != connectionId\n  ) {\n    userEntity.connectionId = connectionId;\n    await userRepository.save(userEntity);\n  }\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\n      `Entering onConnect on connection id: ${connectionId}`\n    ),\n  };\n};\n\nexport const onDefault = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n\nexport const onSendMessage = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const data = JSON.parse(event.body);\n  const uid: string = data.uid;\n  const message: string = data.message;\n  const postId: string = data.postId;\n  const receiveId: string = data.receiveId;\n\n  const connection = await getDatabaseConnection();\n  const userRepository = connection.getRepository(User);\n  const postRepository = connection.getRepository(Post);\n  const chatRepository = connection.getRepository(Chat);\n\n  const userEntity = await userRepository.findOne({\n    uid: uid,\n  });\n\n  const postEntity: Post = await postRepository.findOne({ postId: postId });\n\n  if (userEntity == null || postEntity == null) {\n    return {\n      statusCode: 404,\n      body: \"\",\n    };\n  }\n  console.log(\"@@ \", postEntity);\n  let chat: Chat = new Chat();\n  chat.sendId = \"testid2\";\n  chat.receiveId = receiveId;\n  chat.message = message;\n  chat.post = postEntity;\n  await chatRepository.save(chat);\n\n  const api: ApiGatewayManagementApi = new ApiGatewayManagementApi({\n    endpoint:\n      event.requestContext.domainName + \"/\" + event.requestContext.stage,\n  });\n\n  await api\n    .postToConnection({\n      ConnectionId: userEntity.connectionId,\n      Data: message,\n    })\n    .promise();\n\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n\nexport const onDisconnect = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n","/Users/gong-yeongbin/project/artalleys-gn/services/comment/handler.ts",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231"],"import { APIGatewayEvent, Context, ProxyResult } from \"aws-lambda\";\nimport { Repository } from \"typeorm\";\nimport { getDatabaseConnection } from \"../../src/connection/Connection\";\nimport { Post, Comment } from \"../../src/entity/Entity\";\nimport { name } from \"../util/util\";\nimport { CommentBuilder, CommentData } from \"../../src/dto/CommentDto\";\nimport { ReplyBuilder, ReplyData } from \"../../src/dto/ReplyDto\";\n/**\n * @api {put} /comment/:postId/getFeed     add comment\n * @apiName Add Comment\n * @apiGroup Comment\n *\n * @apiParam (PathParam) {String}postId                           post id\n * @apiParam (Body) {Number}[replyId]                             reply id\n * @apiParam (Body) {String}message                               message\n *\n * @apiParamExample {json} Request Body(comment)\n{\n\t\"message\": \"테스트 댓글\"\n}\n* @apiParamExample {json} Request Body(reply)\n{\n\t\"replyId\": 4,\n\t\"message\": \"테스트 대댓글\"\n}\n * @apiSuccess (204 No Content) {String}    NoContent  Success\n * @apiSuccessExample {text}    Success\n *      HTTP/1.1    204 No Content\n *\n * @apiError (404 Not Found)    ResourceNotFound    This resource cannot be found\n * @apiErrorExample {json}  ResourceNotFound\n *      HTTP/1.1    404    Not Found\n **/\n\nexport const addComment = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const postId: string = event.pathParameters[\"postId\"];\n  const { replyId = null, message } = JSON.parse(event.body);\n\n  const connection = await getDatabaseConnection();\n  const commentRepository: Repository<Comment> = connection.getRepository(\n    Comment\n  );\n  const postRepository: Repository<Post> = connection.getRepository(Post);\n  const postEntity: Post = await postRepository.findOne({ postId: postId });\n\n  if (postEntity == null) {\n    return {\n      statusCode: 404,\n      body: \"\",\n    };\n  }\n\n  const comment: Comment = new Comment();\n  comment.post = postEntity;\n  comment.commentId = name(5);\n  replyId !== null ? (comment.reply = replyId) : null;\n  comment.message = message;\n\n  commentRepository.save(comment);\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n\n/**\n * @api {put} /comment/:commentId/modifyComment     modify comment\n * @apiName Modify Comment\n * @apiGroup Comment\n *\n * @apiParam (PathParam) {String}commentId                        comment id\n * @apiParam (Body) {String}message                               message\n *\n * @apiSuccess (204 No Content) {String}    NoContent  Success\n * @apiSuccessExample {text}    Success\n *      HTTP/1.1    204 No Content\n *\n * @apiError (404 Not Found)    ResourceNotFound    This resource cannot be found\n * @apiErrorExample {json}  ResourceNotFound\n *      HTTP/1.1    404    Not Found\n **/\n\nexport const modifyComment = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const commentId: string = event.pathParameters[\"commentId\"];\n  const { message = \"\" } = JSON.parse(event.body);\n\n  const connection = await getDatabaseConnection();\n  const commentRepository: Repository<Comment> = connection.getRepository(\n    Comment\n  );\n  const commentEntity: Comment = await commentRepository.findOne({\n    commentId: commentId,\n  });\n\n  if (commentEntity == null) {\n    return {\n      statusCode: 404,\n      body: \"\",\n    };\n  }\n\n  commentEntity.message = message;\n  commentRepository.save(commentEntity);\n\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n\n/**\n * @api {get} /comment/:postId/getComment     get comment\n * @apiName Get Comment\n * @apiGroup Comment\n *\n * @apiParam (PathParam) {String}postId                           comment id\n * @apiParam (QueryStringParam) {Number}[offset=0]    offset      offset\n * @apiParam (QueryStringParam) {Number}[limit=10]    limit       limit\n * @apiParam (QueryStringParam) {String}[order=desc]  order       order\n *\n * @apiParamExample Response\n [\n  {\n    \"commentId\": \"29abc2f27c\",\n    \"message\": \"sadfasdgadhfsfg\",\n    \"createdAt\": \"2020-11-17T21:03:32.289Z\",\n    \"updatedAt\": \"2020-11-17T21:03:32.289Z\"\n  },\n  {\n    \"commentId\": \"cb931142d5\",\n    \"message\": \"testtesttest\",\n    \"createdAt\": \"2020-11-17T20:10:03.335Z\",\n    \"updatedAt\": \"2020-11-17T21:42:29.000Z\"\n  }\n]\n *\n * @apiError (404 Not Found)    ResourceNotFound    This resource cannot be found\n * @apiErrorExample {json}  ResourceNotFound\n *      HTTP/1.1    404    Not Found\n **/\nexport const getComment = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const postId: string = event.pathParameters[\"postId\"];\n  const {\n    offset = 0,\n    limit = 10,\n    order = \"desc\",\n  } = event.queryStringParameters;\n  const queryOffset: number = Number(offset);\n  const queryLimit: number = Number(limit);\n  const queryOrder: \"ASC\" | \"DESC\" =\n    order.toUpperCase() == \"ASC\" ? \"ASC\" : \"DESC\";\n\n  const connection = await getDatabaseConnection();\n  const commentRepository: Repository<Comment> = await connection.getRepository(\n    Comment\n  );\n\n  const commentEntity: Comment[] = await commentRepository\n    .createQueryBuilder(\"comment\")\n    .leftJoin(\"comment.post\", \"post\")\n    .leftJoin(\"comment.reply\", \"reply\")\n    .where(\"post.postId = :postId\", {\n      postId: postId,\n    })\n    .andWhere(\"comment.reply is null\")\n    .orderBy(\"comment.createdAt\", queryOrder)\n    .offset(queryOffset)\n    .limit(queryLimit)\n    .getMany();\n\n  const commentDto: CommentData[] = new CommentBuilder(commentEntity).build();\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(commentDto),\n  };\n};\n\n/**\n * @api {get} /comment/:postId/:commentId/getReply     get reply\n * @apiName Get Reply\n * @apiGroup Comment\n *\n * @apiParam (PathParam) {String}postId                           post id\n * @apiParam (PathParam) {String}commentId                        comment id\n * @apiParam (QueryStringParam) {Number}[offset=0]    offset      offset\n * @apiParam (QueryStringParam) {Number}[limit=10]    limit       limit\n * @apiParam (QueryStringParam) {String}[order=asc]  order       order\n *\n * @apiParamExample Response\n[\n  {\n    \"commentId\": \"29abc2f27c\",\n    \"message\": \"sadfasdgadhfsfg\",\n    \"createdAt\": \"2020-11-17T21:03:32.289Z\",\n    \"updateAt\": \"2020-11-17T21:03:32.289Z\"\n  },\n  {\n    \"commentId\": \"29abc2f27c\",\n    \"message\": \"sadfasdgadhfsfg\",\n    \"createdAt\": \"2020-11-17T21:03:32.289Z\",\n    \"updateAt\": \"2020-11-17T21:03:32.289Z\"\n  }\n]\n *\n * @apiError (404 Not Found)    ResourceNotFound    This resource cannot be found\n * @apiErrorExample {json}  ResourceNotFound\n *      HTTP/1.1    404    Not Found\n **/\n\nexport const getReply = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const postId: string = event.pathParameters[\"postId\"];\n  const commentId: string = event.pathParameters[\"commentId\"];\n\n  const { offset = 0, limit = 10, order = \"asc\" } = event.queryStringParameters;\n  const queryOffset: number = Number(offset);\n  const queryLimit: number = Number(limit);\n  const queryOrder: \"ASC\" | \"DESC\" =\n    order.toUpperCase() == \"ASC\" ? \"ASC\" : \"DESC\";\n\n  const connection = await getDatabaseConnection();\n  const commentRepository: Repository<Comment> = await connection.getRepository(\n    Comment\n  );\n\n  const commentEntity: Comment[] = await commentRepository\n    .createQueryBuilder(\"comment\")\n    .leftJoin(\"comment.post\", \"post\")\n    .leftJoinAndSelect(\"comment.reply\", \"reply\")\n    .where(\"post.postId = :postId\", {\n      postId: postId,\n    })\n    .andWhere(\"reply.commentId = :commentId\", { commentId: commentId })\n    .andWhere(\"comment.reply is not null\")\n    .orderBy(\"comment.createdAt\", queryOrder)\n    .offset(queryOffset)\n    .limit(queryLimit)\n    .getMany();\n\n  const replyDto: ReplyData[] = new ReplyBuilder(commentEntity).build();\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(replyDto),\n  };\n};\n\n/**\n * @api {get} /comment/:commentId/deleteComment     delete comment\n * @apiName Delete Comment\n * @apiGroup Comment\n *\n * @apiParam (PathParam) {String}commentId                        comment id\n *\n * @apiSuccess (204 No Content) {String}    NoContent  Success\n * @apiSuccessExample {text}    Success\n *      HTTP/1.1    204 No Content\n *\n * @apiError (404 Not Found)    ResourceNotFound    This resource cannot be found\n * @apiErrorExample {json}  ResourceNotFound\n *      HTTP/1.1    404    Not Found\n **/\n\nexport const deleteComment = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const commentId: string = event.pathParameters[\"commentId\"];\n\n  const connection = await getDatabaseConnection();\n  const commentRepository: Repository<Comment> = connection.getRepository(\n    Comment\n  );\n\n  const commentEntity: Comment = await commentRepository.findOne({\n    commentId: commentId,\n  });\n\n  commentEntity.deleted = true;\n\n  commentRepository.save(commentEntity);\n\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n","/Users/gong-yeongbin/project/artalleys-gn/src/dto/CommentDto.ts",["232","233"],"export interface CommentData {\n  commentId: string;\n  message: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport class CommentBuilder {\n  private _commentData: CommentData[];\n  constructor(comment: CommentData[]) {\n    const commentData: CommentData[] = comment.map((value, index) => {\n      return {\n        commentId: value.commentId,\n        message: value.message,\n        createdAt: value.createdAt,\n        updatedAt: value.updatedAt,\n      };\n    });\n    this._commentData = commentData;\n  }\n\n  public build() {\n    return this._commentData;\n  }\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/dto/ReplyDto.ts",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249"],"import { Comment, Post } from \"../entity/Entity\";\n\ninterface CommentData {\n  id: number;\n  post: Post;\n  commentId: string;\n  reply: Comment;\n  message: string;\n  createdAt: Date;\n  updatedAt: Date;\n  deleted: boolean;\n}\n\nexport interface ReplyData {\n  commentId: string;\n  message: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport class ReplyBuilder {\n  private _replyData: ReplyData[];\n\n  constructor(comment: any) {\n    const replyData: ReplyData[] = comment.map((value, index) => {\n      return {\n        commentId: value.reply.commentId,\n        message: value.reply.message,\n        createdAt: value.reply.createdAt,\n        updateAt: value.reply.updatedAt,\n      };\n    });\n    this._replyData = replyData;\n  }\n\n  public build() {\n    return this._replyData;\n  }\n}\n","/Users/gong-yeongbin/project/artalleys-gn/services/feed/handler.ts",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299"],"import { APIGatewayEvent, Context, ProxyResult } from \"aws-lambda\";\nimport { getDatabaseConnection } from \"../../src/connection/Connection\";\nimport { PostFeedBuilder, PostFeedData } from \"../../src/dto/PostFeedDto\";\nimport {\n  BusinessFeedBuilder,\n  BusinessFeedData,\n} from \"../../src/dto/BusinessFeedDto\";\nimport { Post } from \"../../src/entity/Entity\";\n\nconst { CLOUDFRONT_IMAGE } = process.env;\n\n/**\n * @api {get}  /feed/getFeed     get Feed\n * @apiName Get Feed\n * @apiGroup Feed\n *\n * @apiParam (QueryStringParam) {Number}[offset=0] offset                              offset\n * @apiParam (QueryStringParam) {Number}[limit=10] limit                               limit\n * @apiParam (QueryStringParam) {String=sell,buy} type                                 type\n * \n * @apiParam (body) {Array} [setCategory]       setCategory                            category\n * @apiParam (body) {Array} [setFilter=newest]  setfilter                              filter \n * @apiParam (body) {Array} [setPrice] setPrice                                        price\n * @apiParam (body) {Array} [setPrice] setPrice.min                                    min price\n * @apiParam (body) {Array} [setPrice] setPrice.max                                    max price\n * @apiParam (body) {boolean} [hide] hide                                              hide\n *\n * @apiParamExample request\n{\t\n\t\"setCategory\": [\"pants\",\"t-shirt\"],\n\t\"setFilter\": \"newest\",\n\t\"setPrice\":\t{\t\t\n\t\t\t\t\t\t\t\t\t\"min\":0,\n\t\t\t\t\t\t\t\t\t\"max\":1001\n\t\t\t\t\t\t \t}\n}\n * @apiParamExample response\n [\n  {\n    \"postId\": \"d59704d14321b9c785d350ea596d98\",\n    \"title\": \"hwajangpyoom\",\n    \"price\": 1000,\n    \"active\": \"active\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/test1/d59704d14321b9c785d350ea596d98/origin.png\"\n  },\n  {\n    \"postId\": \"cf5e31252c127cc003cf4d621fb289\",\n    \"title\": \"hwajangpyoom\",\n    \"price\": 1000,\n    \"active\": \"active\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/test1/cf5e31252c127cc003cf4d621fb289/origin.png\"\n  },\n]\n **/\n\nexport const getFeed = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const { offset = 0, limit = 10, type = \"sell\" } = event.queryStringParameters;\n  const {\n    setCategory,\n    setFilter = \"newest\",\n    setPrice,\n    hide = false,\n  } = JSON.parse(event.body);\n\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n\n  const queryOffset: number = Number(offset);\n  const queryLimit: number = Number(limit);\n  const queryType: string = type;\n  const querySetCategory: string[] = setCategory;\n  const queryOrder: \"DESC\" | \"ASC\" =\n    setFilter.toLowerCase() == \"newest | closest\" ? \"DESC\" : \"ASC\";\n  const queryOrderType: string =\n    setFilter.toLowerCase() == \"newest\" ? \"post.updated_at\" : \"\";\n\n  const querySetPriceMin: number = setPrice != null ? setPrice.min : null;\n  const querySetPriceMax: number = setPrice != null ? setPrice.max : null;\n\n  let query = postRepository\n    .createQueryBuilder(\"post\")\n    .leftJoinAndSelect(\"post.normal\", \"normal\")\n    .leftJoinAndSelect(\"post.postImage\", \"postImage\")\n    .where(\"post.hide = false AND normal.type = :isType\", { isType: queryType })\n    .andWhere(\"normal.active = :isActive\", { isActive: hide })\n    .andWhere(\"normal.category NOT IN (:isCategory)\", {\n      isCategory: querySetCategory,\n    })\n    .orderBy(queryOrderType, queryOrder)\n    .offset(queryOffset)\n    .limit(queryLimit);\n\n  if (setPrice != null) {\n    query = query.andWhere(\"normal.price between :isMin and :isMax\", {\n      isMin: querySetPriceMin,\n      isMax: querySetPriceMax,\n    });\n  }\n  const postEntity: Post[] = await query.getMany();\n\n  const feedDto: PostFeedData[] = new PostFeedBuilder(postEntity)\n    .replaceHost(CLOUDFRONT_IMAGE)\n    .build();\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(feedDto),\n  };\n};\n\n/**\n * @api {get}  /feed/getBusinessFeed     get Business Feed\n * @apiName Get Business Feed\n * @apiGroup Feed\n *\n * @apiParam (QueryStringParam) {Number}[offset=0] offset                              offset\n * @apiParam (QueryStringParam) {Number}[limit=10] limit                               limit\n * @apiParam (QueryStringParam) {String=DESC,ASC} order                                order\n *\n *\n * @apiParamExample response\n [\n  {\n    \"postId\": \"4f62a7cb423ac3ff3faf\",\n    \"title\": \"business title\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/testuid/post/4f62a7cb423ac3ff3faf/origin/65fe1202ae6419bd.png\"\n  },\n  {\n    \"postId\": \"b96ff8643d495ce9777a\",\n    \"title\": \"hwajangpyoom\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/testuid/post/b96ff8643d495ce9777a/origin/ce15063e128c7a63.png\"\n  },\n  {\n    \"postId\": \"e085b6dc01c7cce649f9\",\n    \"title\": \"hwajangpyoom\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/testuid/post/e085b6dc01c7cce649f9/origin/670833fe0d2b4920.png\"\n  }\n]\n **/\nexport const getBusinessFeed = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const {\n    offset = 0,\n    limit = 10,\n    type = \"sell\",\n    order = \"DESC\",\n  } = event.queryStringParameters;\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n\n  const queryOffset: number = Number(offset);\n  const queryLimit: number = Number(limit);\n  const queryOrder: \"ASC\" | \"DESC\" =\n    order.toUpperCase() == \"ASC\" ? \"ASC\" : \"DESC\";\n\n  const postEntity: Post[] = await postRepository\n    .createQueryBuilder(\"post\")\n    .leftJoinAndSelect(\"post.business\", \"business\")\n    .leftJoinAndSelect(\"post.postImage\", \"postImage\")\n    .where(\"post.hide = false\")\n    .orderBy(\"post.updated_at\", queryOrder)\n    .offset(queryOffset)\n    .limit(queryLimit)\n    .getMany();\n\n  const feedDto: BusinessFeedData[] = new BusinessFeedBuilder(postEntity)\n    .replaceHost(CLOUDFRONT_IMAGE)\n    .build();\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(feedDto),\n  };\n};\n\n/**\n * @api {get}  /feed/getSearchFeed     get Search Feed\n * @apiName Get Search Feed\n * @apiGroup Feed\n *\n * @apiParam (QueryStringParam) {Number}[offset=0] offset                               offset\n * @apiParam (QueryStringParam) {Number}[limit=10] limit                                limit\n * @apiParam (Body) {String=buy,sell} type                                              type\n * @apiParam (Body) {String} search                                                     search\n * @apiParam (Body) {String=newest,closest,price}[setFilter=\"newest\"]                   setFilter\n * @apiParam (Body) {String=DESC,ASC}[order=\"DESC\"]                                     order\n * @apiParam (Body) {Boolean}[hide=\"false\"]                                             hide\n  * @apiParamExample request\n{\t\n  \"type\": \"buy\"\n\t\"search\":\"hwajangpyoom\",\n\t\"setFilter\": \"newest\",\n\t\"setPrice\":\t{\t\t\n\t\t\t\t\t\t\t\t\t\"min\":0,\n\t\t\t\t\t\t\t\t\t\"max\":1001\n               },\n  \"order\": \"DESC\",\n\t\"hide\": false\n}\n * @apiParamExample response\n[\n  {\n    \"postId\": \"e085b6dc01c7cce649f9\",\n    \"title\": \"hwajangpyoom\",\n    \"view\": 0,\n    \"price\": 1001,\n    \"active\": \"active\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/testuid/post/e085b6dc01c7cce649f9/origin/670833fe0d2b4920.png\"\n  },\n  {\n    \"postId\": \"b96ff8643d495ce9777a\",\n    \"title\": \"hwajangpyoom\",\n    \"view\": 0,\n    \"price\": 1000,\n    \"active\": \"active\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/testuid/post/b96ff8643d495ce9777a/origin/ce15063e128c7a63.png\"\n  }\n]\n **/\nexport const getSearchFeed = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n\n  const { offset = 0, limit = 10 } = event.queryStringParameters;\n\n  const {\n    type,\n    search,\n    setFilter = \"newest\",\n    setPrice,\n    order,\n    hide = false,\n  } = JSON.parse(event.body);\n\n  const queryType: \"sell\" | \"buy\" = type;\n  const querySearch: string = search;\n  const queryPriceMin: number = setPrice.min;\n  const queryPriceMax: number = setPrice.max;\n  const queryOrder: \"DESC\" | \"ASC\" =\n    order.toUpperCase() == \"DESC\" ? \"DESC\" : \"ASC\";\n\n  const queryOrderType: string =\n    setFilter.toLowerCase() == \"newest\"\n      ? \"post.updated_at\"\n      : setFilter.toLowerCase() == \"price\"\n      ? \"normal.price\"\n      : \"\";\n\n  const queryOffset: number = Number(offset);\n  const queryLimit: number = Number(limit);\n\n  let query = postRepository\n    .createQueryBuilder(\"post\")\n    .leftJoinAndSelect(\"post.normal\", \"normal\")\n    .leftJoinAndSelect(\"post.postImage\", \"image\")\n    .where(\"normal.type = :type\", { type: queryType })\n    .andWhere(\"post.title like :title\", { title: `%${querySearch}%` })\n    .orderBy(queryOrderType, queryOrder)\n    .offset(queryOffset)\n    .limit(queryLimit);\n\n  if (hide != null && hide == true) {\n    query = query.andWhere(\"normal.active != :isHide\", { isHide: \"soldout\" });\n  }\n\n  if (setPrice != null) {\n    query = query.andWhere(\"normal.price between :isMin and :isMax\", {\n      isMin: queryPriceMin,\n      isMax: queryPriceMax,\n    });\n  }\n\n  const postEntity: Post[] = await query.getMany();\n\n  const postDto: PostFeedData[] = new PostFeedBuilder(postEntity)\n    .replaceHost(CLOUDFRONT_IMAGE)\n    .build();\n  return {\n    statusCode: 200,\n    body: JSON.stringify(postDto),\n  };\n};\n\n/**\n * @api {get}  /feed/getCategoryFeed     get Category Feed\n * @apiName Get Category Feed\n * @apiGroup Feed\n *\n * @apiParam (QueryStringParam) {Number}[offset=0] offset                               offset\n * @apiParam (QueryStringParam) {Number}[limit=10] limit                                limit\n * @apiParam (Body) {String=buy,sell} type                                              type\n * @apiParam (Body) {String} category                                                   category\n * @apiParam (Body) {String=newest,closest,price}[setFilter=\"newest\"]                   setFilter\n * @apiParam (Body) {String=DESC,ASC}[order=\"DESC\"]                                     order\n * @apiParam (Body) {Boolean}[hide=\"false\"]                                             hide\n  * @apiParamExample request\n{\t\n  \"type\": \"buy\"\n\t\"category\":\"hwajangpyoom category\",\n\t\"setFilter\": \"newest\",\n\t\"setPrice\":\t{\t\t\n\t\t\t\t\t\t\t\t\t\"min\":0,\n\t\t\t\t\t\t\t\t\t\"max\":1001\n               },\n  \"order\": \"DESC\",\n\t\"hide\": false\n}\n * @apiParamExample response\n[\n  {\n    \"postId\": \"e085b6dc01c7cce649f9\",\n    \"title\": \"hwajangpyoom\",\n    \"view\": 0,\n    \"price\": 1000,\n    \"active\": \"active\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/testuid/post/e085b6dc01c7cce649f9/origin/670833fe0d2b4920.png\"\n  },\n  {\n    \"postId\": \"b96ff8643d495ce9777a\",\n    \"title\": \"hwajangpyoom\",\n    \"view\": 0,\n    \"price\": 1000,\n    \"active\": \"active\",\n    \"url\": \"d19j7dhfxgaxy7.cloudfront.net/testuid/post/b96ff8643d495ce9777a/origin/ce15063e128c7a63.png\"\n  }\n]\n **/\n\nexport const getCategoryFeed = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n\n  const { offset = 0, limit = 10 } = event.queryStringParameters;\n\n  const {\n    type,\n    category,\n    setFilter = \"newest\",\n    setPrice,\n    order,\n    hide = false,\n  } = JSON.parse(event.body);\n\n  const queryType: \"sell\" | \"buy\" = type;\n  const queryCategory: string = category;\n  const queryPriceMin: number = setPrice.min;\n  const queryPriceMax: number = setPrice.max;\n  const queryOrder: \"DESC\" | \"ASC\" =\n    order.toUpperCase() == \"DESC\" ? \"DESC\" : \"ASC\";\n\n  const queryOrderType: string =\n    setFilter.toLowerCase() == \"newest\"\n      ? \"post.updated_at\"\n      : setFilter.toLowerCase() == \"price\"\n      ? \"normal.price\"\n      : \"\";\n\n  const queryOffset: number = Number(offset);\n  const queryLimit: number = Number(limit);\n\n  let query = postRepository\n    .createQueryBuilder(\"post\")\n    .leftJoinAndSelect(\"post.normal\", \"normal\")\n    .leftJoinAndSelect(\"post.postImage\", \"image\")\n    .where(\"normal.type = :type\", { type: queryType })\n    .andWhere(\"normal.category = :category\", { category: queryCategory })\n    .orderBy(queryOrderType, queryOrder)\n    .offset(queryOffset)\n    .limit(queryLimit);\n\n  if (hide != null && hide == true) {\n    query = query.andWhere(\"normal.active != :isHide\", { isHide: \"soldout\" });\n  }\n\n  if (setPrice != null) {\n    query = query.andWhere(\"normal.price between :isMin and :isMax\", {\n      isMin: queryPriceMin,\n      isMax: queryPriceMax,\n    });\n  }\n\n  const postEntity: Post[] = await query.getMany();\n\n  const postDto: PostFeedData[] = new PostFeedBuilder(postEntity)\n    .replaceHost(CLOUDFRONT_IMAGE)\n    .build();\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(postDto),\n  };\n};\n","/Users/gong-yeongbin/project/artalleys-gn/src/dto/PostFeedDto.ts",["300","301"],"import { Post } from \"../entity/Entity\";\nimport { replaceHost } from \"../../services/util/http\";\n\nexport interface PostFeedData {\n  postId: string;\n  title: string;\n  price: number;\n  active: string;\n  url: string;\n}\n\nexport class PostFeedBuilder {\n  private _postData: PostFeedData[];\n\n  constructor(post: Post[]) {\n    const postData: PostFeedData[] = post.map((value, index) => {\n      console.log(value);\n      return {\n        postId: value.postId,\n        title: value.title,\n        view: value.view,\n        price: value.normal.price,\n        active: value.normal.active,\n        url: value.postImage[0].url,\n      };\n    });\n    this._postData = postData;\n  }\n\n  public replaceHost(newHost: string): PostFeedBuilder {\n    this._postData.map((value, index) => {\n      this._postData[index].url = replaceHost(\n        this._postData[index].url,\n        newHost\n      );\n    });\n    return this;\n  }\n\n  public build() {\n    return this._postData;\n  }\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/dto/BusinessFeedDto.ts",["302","303"],"import { Post } from \"../entity/Entity\";\nimport { replaceHost } from \"../../services/util/http\";\n\nexport interface BusinessFeedData {\n  postId: string;\n  title: string;\n  url: string;\n  view?: number;\n  detailTitle?: string;\n  address?: string;\n  startTime?: number;\n  endTime?: number;\n  homePage?: string;\n  workingHoursDescriptions?: string;\n  descriptions?: string;\n}\n\nexport class BusinessFeedBuilder {\n  private _businessFeedData: BusinessFeedData[];\n\n  constructor(post: Post[]) {\n    const businessFeedData: BusinessFeedData[] = post.map((value, index) => {\n      return {\n        postId: value.postId,\n        title: value.title,\n        url: value.postImage[0].url,\n      };\n    });\n    this._businessFeedData = businessFeedData;\n  }\n\n  public replaceHost(newHost: string): BusinessFeedBuilder {\n    this._businessFeedData.map((value, index) => {\n      this._businessFeedData[index].url = replaceHost(\n        this._businessFeedData[index].url,\n        newHost\n      );\n    });\n    return this;\n  }\n\n  public build() {\n    return this._businessFeedData;\n  }\n}\n","/Users/gong-yeongbin/project/artalleys-gn/services/post/handler.ts",["304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352"],"import {\n  APIGatewayEvent,\n  Context,\n  ProxyResult,\n  SQSEvent,\n  SQSRecord,\n} from \"aws-lambda\";\nimport * as jimp from \"jimp\";\nimport { name } from \"../util/util\";\nimport { getDatabaseConnection } from \"../../src/connection/Connection\";\nimport {\n  putObject,\n  getObject,\n  deleteObject,\n  deleteMessage,\n  sendMessage,\n} from \"../util/aws\";\nimport { Post, PostNormal, Image, Location } from \"../../src/entity/Entity\";\nimport { PostBuilder, PostData } from \"../../src/dto/PostDto\";\nimport { getRepository } from \"typeorm\";\n\nconst { CLOUDFRONT_IMAGE } = process.env;\n\n/**\n * @api {put}  /post/:uid/createPost     Create Post\n * @apiName Create Post\n * @apiGroup Post\n *\n * @apiParam (PathParam) {String} uid                                   uid\n * @apiParam (Body) {String{30}}  title                                 post title\n * @apiParam (Body) {String=\"sell\",\"buy\",\"business\"}  type              post type\n * @apiParam (Body) {String} category                                   post category\n * @apiParam (Body) {String} condition                                  post condition\n * @apiParam (Body) {Object} [location]                                 post location(type: sell)\n * @apiParam (Body) {Object} location.latitude                          post location latitude\n * @apiParam (Body) {Object} location.longtitude                        post location longtitude\n * @apiParam (Body) {number} [price]                                    post price\n * @apiParam (Body) {boolean} firmOnPrice                               post firm on price\n * @apiParam (Body) {number} [number]                                   post number(type: business)\n * @apiParam (Body) {String{300}} descriptions                          post descriptions\n * @apiParam (Body) {boolean} [hide]                                    post hide\n * @apiParam (Body) {base64} image                                      post image\n *\n *\n * @apiParamExample {json} Request Body\n {\n   \"title\": \"hwajangpyoom\",\n   \"type\": \"buy\",\n   \"category\":\"hwajangpyoom category\",\n   \"condition\": \"other\",\n   \"location\": {\"latitude\":\"12.123\",\"longtitude\":\"13.123\"},\n   \"price\": 1000,\n   \"firmOnPrice\": true,\n   \"number\": 12312341234,\n   \"descriptions\":\"test hwajangpyoom e da\",\n   \"hide\": false,\n   \"image\": [\"testtesttesttest........\"]\n }\n * @apiSuccess (200 OK) {String} NoContent                              Success\n **/\n\nexport const createPost = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n  const postNormalRepository = connection.getRepository(PostNormal);\n  const imageRepository = connection.getRepository(Image);\n  const locationRepository = connection.getRepository(Location);\n\n  const uid: string = event.pathParameters[\"uid\"];\n  const postId = name(10);\n  const data: any = JSON.parse(event.body);\n\n  let post: Post = new Post();\n  let postNormal: PostNormal = new PostNormal();\n  let location: Location = new Location();\n\n  let { title, number }: Post = data;\n\n  let {\n    type,\n    category,\n    price = 0,\n    descriptions,\n    condition,\n    firmOnPrice = true,\n  }: PostNormal = data;\n\n  post.postId = postId;\n  post.title = title;\n  post.number = number;\n  await postRepository.save(post);\n\n  postNormal.type = type.toLowerCase();\n  postNormal.category = category.toLowerCase();\n  postNormal.price = price;\n  postNormal.firmOnPrice = firmOnPrice;\n  postNormal.descriptions = descriptions;\n  postNormal.condition = condition.toLowerCase();\n  postNormal.post = post;\n  await postNormalRepository.save(postNormal);\n\n  location.longtitude = data.location.longtitude;\n  location.latitude = data.location.latitude;\n  await locationRepository.save(location);\n\n  for (let index in data.image) {\n    let imageName = name(8);\n\n    await imageRepository\n      .createQueryBuilder()\n      .insert()\n      .into(Image)\n      .values({\n        post: post,\n        url: `https://artalleys-gn-image-bucket.s3.us-east-2.amazonaws.com/${uid}/post/${postId}/origin/${imageName}.png`,\n      })\n      .execute();\n\n    const originalImage = Buffer.from(data.image[index], \"base64\");\n\n    // await putObject(\n    //   originalImage,\n    //   `${uid}/post/${postId}/origin/${imageName}.png`\n    // );\n    // await sendMessage(`${uid}/post/${postId}/origin/${imageName}.png`);\n  }\n\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n\n/**\n * @api {get}  /post/:uid/:postId/getPost     Get Post\n * @apiName Get Post\n * @apiGroup Post\n *\n * @apiParam (PathParam) {String} uid                                   uid\n * @apiParam (PathParam) {String} postId                                postId\n *\n *\n * @apiParamExample {json} Response\n {\n  \"id\": \"56\",\n  \"postId\": \"aafde3c18d762d3c03ca0943b9cfe6\",\n  \"type\": \"buy\",\n  \"title\": \"hwajangpyoom\",\n  \"category\": \"hwajangpyoom category\",\n  \"price\": 0,\n  \"firmOnPrice\": false,\n  \"descriptions\": \"test hwajangpyoom e da\",\n  \"condition\": \"other\",\n  \"view\": 0,\n  \"number\": null,\n  \"active\": \"active\",\n  \"hide\": false,\n  \"createdAt\": \"2020-11-10T22:00:07.315Z\",\n  \"updatedAt\": \"2020-11-10T22:00:07.315Z\",\n  \"postLocation\": {\n    \"id\": \"49\",\n    \"longtitude\": 13,\n    \"latitude\": 12,\n    \"createdAt\": \"2020-11-10T22:00:07.285Z\",\n    \"updatedAt\": \"2020-11-10T22:00:07.000Z\"\n  },\n  \"postImage\": []\n}\n * @apiSuccess  (200 OK) {String} NoContent           Success\n * @apiError    (404 Not Found)   ResourceNotFound    This resource cannot be found\n **/\nexport const getPost = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const uid: string = event.pathParameters[\"uid\"];\n  const postId: string = event.pathParameters[\"postId\"];\n\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n  const postEntity = await postRepository\n    .createQueryBuilder(\"post\")\n    .leftJoinAndSelect(\"post.normal\", \"normal\")\n    .leftJoinAndSelect(\"post.postLocation\", \"postLocation\")\n    .leftJoinAndSelect(\"post.postImage\", \"postImage\")\n    .where(\"post.postId = :postId\", { postId: postId })\n    .getOne();\n\n  if (postEntity == null) {\n    return {\n      statusCode: 404,\n      body: \"null\",\n    };\n  }\n  const postDto: PostData = new PostBuilder(postEntity)\n    .replaceHost(CLOUDFRONT_IMAGE)\n    .build();\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify(postDto),\n  };\n};\n\n/**\n * @api {get}  /post/:uid/:postId/boostPost     boost Post\n * @apiName Boost Post\n * @apiGroup Post\n *\n * @apiParam (PathParam) {String} uid                                   uid\n * @apiParam (PathParam) {String} postId                                postId\n *\n *\n * @apiSuccess  (200 OK) {String} NoContent           Success\n * @apiError    (404 Not Found)   ResourceNotFound    This resource cannot be found\n **/\nexport const boostPost = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const uid: string = event.pathParameters[\"uid\"];\n  const postId: string = event.pathParameters[\"postId\"];\n\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n  const postEntity = await postRepository.findOne({\n    postId: postId,\n  });\n  postEntity.updatedAt = new Date();\n  postRepository.save(postEntity);\n\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n/**\n * @api {get}  /post/:uid/:postId/getPost     hide Post\n * @apiName Hide Post\n * @apiGroup Post\n *\n * @apiParam (PathParam) {String} uid                                   uid\n * @apiParam (PathParam) {String} postId                                postId\n *\n *\n * @apiSuccess  (200 OK) {String} NoContent           Success\n * @apiError    (404 Not Found)   ResourceNotFound    This resource cannot be found\n **/\nexport const hidePost = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const uid: string = event.pathParameters[\"uid\"];\n  const postId: string = event.pathParameters[\"postId\"];\n\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n  const postEntity = await postRepository.findOne({ postId: postId });\n  postEntity.hide === true\n    ? (postEntity.hide = false)\n    : (postEntity.hide = true);\n\n  postRepository.save(postEntity);\n\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n\n/**\n * @api {get}  /post/:uid/:postId/deletePost     delete Post\n * @apiName Delete Post\n * @apiGroup Post\n *\n * @apiParam (PathParam) {String} uid                                   uid\n * @apiParam (PathParam) {String} postId                                postId\n *\n *\n * @apiSuccess  (200 OK) {String} NoContent           Success\n * @apiError    (404 Not Found)   ResourceNotFound    This resource cannot be found\n **/\nexport const deletePost = async (\n  event: APIGatewayEvent,\n  context: Context\n): Promise<ProxyResult> => {\n  const uid: string = event.pathParameters[\"uid\"];\n  const postId: string = event.pathParameters[\"postId\"];\n\n  const connection = await getDatabaseConnection();\n  const postRepository = connection.getRepository(Post);\n\n  const postEntity = await postRepository\n    .createQueryBuilder(\"post\")\n    .leftJoinAndSelect(\"post.postImage\", \"postImage\")\n    .where(\"post.postId = :postId\", { postId: postId })\n    .getOne();\n\n  if (postEntity == null) {\n    return {\n      statusCode: 404,\n      body: \"\",\n    };\n  }\n\n  for (let index in postEntity.postImage) {\n    let objecyKey = postEntity.postImage[index].url.replace(\n      \"https://artalleys-gn-image-bucket.s3.us-east-2.amazonaws.com/\",\n      \"\"\n    );\n    await deleteObject(objecyKey);\n  }\n\n  await postRepository\n    .createQueryBuilder()\n    .delete()\n    .from(Post)\n    .where(\"postId = :postId\", { postId: postId })\n    .execute();\n\n  return {\n    statusCode: 200,\n    body: \"\",\n  };\n};\n\nexport const imageResize = async (\n  event: SQSEvent,\n  context: Context\n): Promise<void> => {\n  for (let record of event.Records) {\n    const receiveData: string = record.body;\n    const type: string = receiveData.split(\"/\")[1];\n    const id: string = receiveData.split(\"/\")[2];\n\n    const connection = await getDatabaseConnection();\n    const postRepository = connection.getRepository(Post);\n    const imageRepository = connection.getRepository(Image);\n\n    const imageObject: any = await getObject(receiveData as string);\n    const imageBuffer: Buffer = imageObject.Body as Buffer;\n\n    let image: Image = new Image();\n    image.url = `https://artalleys-gn-image-bucket.s3.us-east-2.amazonaws.com/${receiveData.replace(\n      \"origin\",\n      \"resize\"\n    )}`;\n\n    const postEntity: Post = await postRepository.findOne({ postId: id });\n    image.post = postEntity;\n\n    await imageRepository.save(image);\n\n    const resizeImageData = await (await jimp.read(imageBuffer)).resize(\n      jimp.AUTO,\n      360\n    );\n\n    resizeImageData.getBuffer(jimp.MIME_PNG, async (err, resizeImage) => {\n      await putObject(\n        resizeImage,\n        `${receiveData.replace(\"origin\", \"resize\")}`\n      );\n    });\n\n    await deleteMessage(record.receiptHandle);\n  }\n};\n","/Users/gong-yeongbin/project/artalleys-gn/src/dto/PostDto.ts",["353"],"import { Post } from \"../entity/Entity\";\nimport { replaceHost } from \"../../services/util/http\";\n\ninterface Location {\n  longtitude: number;\n  latitude: number;\n}\n\nexport interface PostData {\n  postId: string;\n  type: string;\n  category: string;\n  title: string;\n  descriptions: string;\n  condition: string;\n  view: number;\n  number: number;\n  price: number;\n  active: string;\n  url: string[];\n  location: Location;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport class PostBuilder {\n  private _postData: PostData;\n\n  constructor(post: Post) {\n    const postImage: string[] = [];\n    post.postImage.map((value, index) => {\n      postImage[index] = value.url;\n    });\n    const postLocation: Location = {\n      longtitude: post.postLocation.longtitude,\n      latitude: post.postLocation.latitude,\n    };\n    const postData: PostData = {\n      postId: post.postId,\n      type: post.normal.type,\n      category: post.normal.category,\n      title: post.title,\n      descriptions: post.normal.descriptions,\n      condition: post.normal.condition,\n      view: post.view,\n      number: post.number,\n      price: post.normal.price,\n      active: post.normal.active,\n      url: postImage,\n      location: postLocation,\n      createdAt: post.createdAt,\n      updatedAt: post.updatedAt,\n    };\n\n    this._postData = postData;\n  }\n\n  public replaceHost(newHost: string): PostBuilder {\n    this._postData.url.map((value, index) => {\n      this._postData.url[index] = replaceHost(\n        this._postData.url[index],\n        newHost\n      );\n    });\n    return this;\n  }\n\n  public build() {\n    return this._postData;\n  }\n}\n","/Users/gong-yeongbin/project/artalleys-gn/src/index.ts",["354","355","356","357"],"import \"reflect-metadata\";\nimport { createConnection } from \"typeorm\";\n\ncreateConnection()\n  .then(async (connection) => {\n    console.log(\"Inserting a new user into the database...\");\n    const user = new User();\n    await connection.manager.save(user);\n    console.log(\"Saved a new user with id: \" + user.id);\n\n    console.log(\"Loading users from the database...\");\n    const users = await connection.manager.find(User);\n    console.log(\"Loaded users: \", users);\n\n    console.log(\"Here you can setup and run express/koa/any other framework.\");\n  })\n  .catch((error) => console.log(error));\n",{"ruleId":"358","severity":1,"message":"359","line":5,"column":53,"nodeType":"360","messageId":"361","endLine":5,"endColumn":61},{"ruleId":"362","severity":2,"message":"363","line":5,"column":63,"nodeType":"364","messageId":"365","endLine":5,"endColumn":65},{"ruleId":"358","severity":1,"message":"366","line":1,"column":10,"nodeType":"360","messageId":"361","endLine":1,"endColumn":17},{"ruleId":"358","severity":1,"message":"367","line":7,"column":3,"nodeType":"360","messageId":"361","endLine":7,"endColumn":15},{"ruleId":"358","severity":1,"message":"368","line":26,"column":3,"nodeType":"360","messageId":"361","endLine":26,"endColumn":10},{"ruleId":"358","severity":1,"message":"369","line":27,"column":3,"nodeType":"360","messageId":"361","endLine":27,"endColumn":10},{"ruleId":"358","severity":1,"message":"370","line":29,"column":3,"nodeType":"360","messageId":"361","endLine":29,"endColumn":14},{"ruleId":"358","severity":1,"message":"371","line":31,"column":3,"nodeType":"360","messageId":"361","endLine":31,"endColumn":17},{"ruleId":"372","severity":2,"message":"373","line":103,"column":3,"nodeType":"374","messageId":"375","endLine":103,"endColumn":16},{"ruleId":"372","severity":2,"message":"373","line":105,"column":3,"nodeType":"374","messageId":"375","endLine":105,"endColumn":16},{"ruleId":"372","severity":2,"message":"373","line":107,"column":3,"nodeType":"374","messageId":"375","endLine":107,"endColumn":16},{"ruleId":"372","severity":2,"message":"373","line":110,"column":3,"nodeType":"374","messageId":"375","endLine":110,"endColumn":16},{"ruleId":"372","severity":2,"message":"373","line":112,"column":3,"nodeType":"374","messageId":"375","endLine":112,"endColumn":16},{"ruleId":"372","severity":2,"message":"373","line":114,"column":3,"nodeType":"374","messageId":"375","endLine":114,"endColumn":16},{"ruleId":"358","severity":1,"message":"376","line":9,"column":3,"nodeType":"360","messageId":"361","endLine":9,"endColumn":13},{"ruleId":"358","severity":1,"message":"377","line":5,"column":3,"nodeType":"360","messageId":"361","endLine":5,"endColumn":19},{"ruleId":"358","severity":1,"message":"378","line":6,"column":3,"nodeType":"360","messageId":"361","endLine":6,"endColumn":19},{"ruleId":"358","severity":1,"message":"379","line":9,"column":3,"nodeType":"360","messageId":"361","endLine":9,"endColumn":9},{"ruleId":"358","severity":1,"message":"379","line":9,"column":3,"nodeType":"360","messageId":"361","endLine":9,"endColumn":9},{"ruleId":"358","severity":1,"message":"380","line":18,"column":15,"nodeType":"360","messageId":"361","endLine":18,"endColumn":16},{"ruleId":"358","severity":1,"message":"380","line":25,"column":15,"nodeType":"360","messageId":"361","endLine":25,"endColumn":16},{"ruleId":"358","severity":1,"message":"381","line":55,"column":3,"nodeType":"360","messageId":"361","endLine":55,"endColumn":19},{"ruleId":"382","severity":2,"message":"383","line":64,"column":9,"nodeType":"384","messageId":"385","endLine":64,"endColumn":43},{"ruleId":"386","severity":1,"message":"387","line":64,"column":15,"nodeType":"388","messageId":"389","endLine":64,"endColumn":18,"suggestions":"390"},{"ruleId":"391","severity":2,"message":"392","line":66,"column":7,"nodeType":"360","messageId":"393","endLine":66,"endColumn":17,"fix":"394"},{"ruleId":"391","severity":2,"message":"395","line":67,"column":7,"nodeType":"360","messageId":"393","endLine":67,"endColumn":33,"fix":"396"},{"ruleId":"391","severity":2,"message":"397","line":68,"column":7,"nodeType":"360","messageId":"393","endLine":68,"endColumn":25,"fix":"398"},{"ruleId":"382","severity":2,"message":"383","line":70,"column":7,"nodeType":"384","messageId":"385","endLine":70,"endColumn":37},{"ruleId":"391","severity":2,"message":"399","line":70,"column":9,"nodeType":"360","messageId":"393","endLine":70,"endColumn":14,"fix":"400"},{"ruleId":"391","severity":2,"message":"401","line":70,"column":16,"nodeType":"360","messageId":"393","endLine":70,"endColumn":22,"fix":"402"},{"ruleId":"382","severity":2,"message":"383","line":72,"column":7,"nodeType":"384","messageId":"385","endLine":78,"endColumn":25},{"ruleId":"391","severity":2,"message":"403","line":73,"column":5,"nodeType":"360","messageId":"393","endLine":73,"endColumn":16,"fix":"404"},{"ruleId":"391","severity":2,"message":"405","line":74,"column":5,"nodeType":"360","messageId":"393","endLine":74,"endColumn":12,"fix":"406"},{"ruleId":"391","severity":2,"message":"407","line":75,"column":5,"nodeType":"360","messageId":"393","endLine":75,"endColumn":17,"fix":"408"},{"ruleId":"391","severity":2,"message":"409","line":76,"column":5,"nodeType":"360","messageId":"393","endLine":76,"endColumn":29,"fix":"410"},{"ruleId":"391","severity":2,"message":"411","line":77,"column":5,"nodeType":"360","messageId":"393","endLine":77,"endColumn":13,"fix":"412"},{"ruleId":"382","severity":2,"message":"383","line":80,"column":3,"nodeType":"413","messageId":"385","endLine":80,"endColumn":49},{"ruleId":"414","severity":2,"message":"415","line":80,"column":25,"nodeType":"416","messageId":"417","endLine":80,"endColumn":38},{"ruleId":"382","severity":2,"message":"383","line":81,"column":3,"nodeType":"413","messageId":"385","endLine":81,"endColumn":45},{"ruleId":"414","severity":2,"message":"415","line":81,"column":23,"nodeType":"416","messageId":"417","endLine":81,"endColumn":36},{"ruleId":"382","severity":2,"message":"383","line":91,"column":3,"nodeType":"413","messageId":"385","endLine":91,"endColumn":51},{"ruleId":"414","severity":2,"message":"418","line":91,"column":28,"nodeType":"416","messageId":"417","endLine":91,"endColumn":45},{"ruleId":"382","severity":2,"message":"383","line":92,"column":3,"nodeType":"413","messageId":"385","endLine":92,"endColumn":47},{"ruleId":"414","severity":2,"message":"418","line":92,"column":26,"nodeType":"416","messageId":"417","endLine":92,"endColumn":43},{"ruleId":"419","severity":2,"message":"420","line":97,"column":3,"nodeType":"421","messageId":"422","endLine":97,"endColumn":45,"suggestions":"423"},{"ruleId":"391","severity":2,"message":"424","line":99,"column":12,"nodeType":"360","messageId":"393","endLine":99,"endColumn":17,"fix":"425"},{"ruleId":"414","severity":2,"message":"426","line":99,"column":21,"nodeType":"416","messageId":"417","endLine":99,"endColumn":31},{"ruleId":"391","severity":2,"message":"427","line":100,"column":9,"nodeType":"360","messageId":"393","endLine":100,"endColumn":18,"fix":"428"},{"ruleId":"414","severity":2,"message":"426","line":112,"column":39,"nodeType":"416","messageId":"417","endLine":112,"endColumn":49},{"ruleId":"358","severity":1,"message":"381","line":163,"column":3,"nodeType":"360","messageId":"361","endLine":163,"endColumn":19},{"ruleId":"358","severity":1,"message":"429","line":165,"column":9,"nodeType":"360","messageId":"361","endLine":165,"endColumn":20},{"ruleId":"430","severity":1,"message":"431","line":20,"column":26,"nodeType":"364","messageId":"432","endLine":20,"endColumn":62},{"ruleId":"430","severity":1,"message":"431","line":31,"column":26,"nodeType":"364","messageId":"432","endLine":31,"endColumn":48},{"ruleId":"430","severity":1,"message":"431","line":40,"column":29,"nodeType":"364","messageId":"432","endLine":40,"endColumn":51},{"ruleId":"430","severity":1,"message":"431","line":44,"column":28,"nodeType":"364","messageId":"432","endLine":44,"endColumn":58},{"ruleId":"430","severity":1,"message":"431","line":53,"column":30,"nodeType":"364","messageId":"432","endLine":53,"endColumn":62},{"ruleId":"430","severity":1,"message":"431","line":3,"column":21,"nodeType":"364","messageId":"432","endLine":3,"endColumn":35},{"ruleId":"430","severity":1,"message":"431","line":66,"column":3,"nodeType":"433","messageId":"432","endLine":66,"endColumn":17},{"ruleId":"358","severity":1,"message":"434","line":3,"column":10,"nodeType":"360","messageId":"361","endLine":3,"endColumn":17},{"ruleId":"358","severity":1,"message":"381","line":10,"column":3,"nodeType":"360","messageId":"361","endLine":10,"endColumn":19},{"ruleId":"435","severity":2,"message":"436","line":14,"column":9,"nodeType":"384","messageId":"437","endLine":14,"endColumn":32,"fix":"438"},{"ruleId":"358","severity":1,"message":"439","line":49,"column":3,"nodeType":"360","messageId":"361","endLine":49,"endColumn":25},{"ruleId":"358","severity":1,"message":"381","line":50,"column":3,"nodeType":"360","messageId":"361","endLine":50,"endColumn":19},{"ruleId":"362","severity":2,"message":"440","line":51,"column":25,"nodeType":"364","messageId":"365","endLine":51,"endColumn":27},{"ruleId":"358","severity":1,"message":"381","line":60,"column":3,"nodeType":"360","messageId":"361","endLine":60,"endColumn":19},{"ruleId":"382","severity":2,"message":"383","line":62,"column":9,"nodeType":"384","messageId":"385","endLine":62,"endColumn":38},{"ruleId":"382","severity":2,"message":"383","line":63,"column":9,"nodeType":"384","messageId":"385","endLine":63,"endColumn":31},{"ruleId":"414","severity":2,"message":"441","line":63,"column":23,"nodeType":"416","messageId":"417","endLine":63,"endColumn":31},{"ruleId":"382","severity":2,"message":"383","line":64,"column":9,"nodeType":"384","messageId":"385","endLine":64,"endColumn":39},{"ruleId":"414","severity":2,"message":"442","line":64,"column":27,"nodeType":"416","messageId":"417","endLine":64,"endColumn":39},{"ruleId":"382","severity":2,"message":"383","line":65,"column":9,"nodeType":"384","messageId":"385","endLine":65,"endColumn":37},{"ruleId":"414","severity":2,"message":"443","line":65,"column":26,"nodeType":"416","messageId":"417","endLine":65,"endColumn":37},{"ruleId":"382","severity":2,"message":"383","line":66,"column":9,"nodeType":"384","messageId":"385","endLine":66,"endColumn":43},{"ruleId":"414","severity":2,"message":"444","line":66,"column":29,"nodeType":"416","messageId":"417","endLine":66,"endColumn":43},{"ruleId":"391","severity":2,"message":"445","line":86,"column":7,"nodeType":"360","messageId":"393","endLine":86,"endColumn":17,"fix":"446"},{"ruleId":"358","severity":1,"message":"439","line":112,"column":3,"nodeType":"360","messageId":"361","endLine":112,"endColumn":25},{"ruleId":"358","severity":1,"message":"381","line":113,"column":3,"nodeType":"360","messageId":"361","endLine":113,"endColumn":19},{"ruleId":"362","severity":2,"message":"447","line":114,"column":25,"nodeType":"364","messageId":"365","endLine":114,"endColumn":27},{"ruleId":"358","severity":1,"message":"381","line":37,"column":3,"nodeType":"360","messageId":"361","endLine":37,"endColumn":19},{"ruleId":"382","severity":2,"message":"383","line":40,"column":9,"nodeType":"384","messageId":"385","endLine":40,"endColumn":61},{"ruleId":"382","severity":2,"message":"383","line":59,"column":23,"nodeType":"413","messageId":"385","endLine":59,"endColumn":46},{"ruleId":"382","severity":2,"message":"383","line":60,"column":3,"nodeType":"413","messageId":"385","endLine":60,"endColumn":28},{"ruleId":"419","severity":2,"message":"420","line":62,"column":3,"nodeType":"421","messageId":"422","endLine":62,"endColumn":35,"suggestions":"448"},{"ruleId":"358","severity":1,"message":"381","line":88,"column":3,"nodeType":"360","messageId":"361","endLine":88,"endColumn":19},{"ruleId":"382","severity":2,"message":"383","line":91,"column":9,"nodeType":"384","messageId":"385","endLine":91,"endColumn":50},{"ruleId":"382","severity":2,"message":"383","line":108,"column":3,"nodeType":"413","messageId":"385","endLine":108,"endColumn":34},{"ruleId":"419","severity":2,"message":"420","line":109,"column":3,"nodeType":"421","messageId":"422","endLine":109,"endColumn":41,"suggestions":"449"},{"ruleId":"358","severity":1,"message":"381","line":149,"column":3,"nodeType":"360","messageId":"361","endLine":149,"endColumn":19},{"ruleId":"435","severity":2,"message":"450","line":157,"column":9,"nodeType":"384","messageId":"437","endLine":157,"endColumn":45,"fix":"451"},{"ruleId":"435","severity":2,"message":"450","line":158,"column":9,"nodeType":"384","messageId":"437","endLine":158,"endColumn":43,"fix":"452"},{"ruleId":"453","severity":2,"message":"454","line":163,"column":50,"nodeType":"455","messageId":"456","endLine":165,"endColumn":4},{"ruleId":"358","severity":1,"message":"381","line":222,"column":3,"nodeType":"360","messageId":"361","endLine":222,"endColumn":19},{"ruleId":"435","severity":2,"message":"450","line":228,"column":9,"nodeType":"384","messageId":"437","endLine":228,"endColumn":45,"fix":"457"},{"ruleId":"435","severity":2,"message":"450","line":229,"column":9,"nodeType":"384","messageId":"437","endLine":229,"endColumn":43,"fix":"458"},{"ruleId":"453","severity":2,"message":"454","line":234,"column":50,"nodeType":"455","messageId":"456","endLine":236,"endColumn":4},{"ruleId":"358","severity":1,"message":"381","line":278,"column":3,"nodeType":"360","messageId":"361","endLine":278,"endColumn":19},{"ruleId":"419","severity":2,"message":"420","line":293,"column":3,"nodeType":"421","messageId":"422","endLine":293,"endColumn":41,"suggestions":"459"},{"ruleId":"358","severity":1,"message":"460","line":11,"column":60,"nodeType":"360","messageId":"361","endLine":11,"endColumn":65},{"ruleId":"430","severity":1,"message":"431","line":22,"column":3,"nodeType":"433","messageId":"432","endLine":22,"endColumn":17},{"ruleId":"358","severity":1,"message":"461","line":3,"column":11,"nodeType":"360","messageId":"361","endLine":3,"endColumn":22},{"ruleId":"430","severity":1,"message":"462","line":24,"column":15,"nodeType":"360","messageId":"463","endLine":24,"endColumn":27},{"ruleId":"386","severity":1,"message":"387","line":24,"column":24,"nodeType":"388","messageId":"389","endLine":24,"endColumn":27,"suggestions":"464"},{"ruleId":"382","severity":2,"message":"383","line":25,"column":11,"nodeType":"384","messageId":"385","endLine":32,"endColumn":7},{"ruleId":"414","severity":2,"message":"465","line":25,"column":36,"nodeType":"416","messageId":"417","endLine":25,"endColumn":47},{"ruleId":"466","severity":2,"message":"467","line":25,"column":36,"nodeType":"416","messageId":"468","endLine":25,"endColumn":47},{"ruleId":"358","severity":1,"message":"460","line":25,"column":56,"nodeType":"360","messageId":"361","endLine":25,"endColumn":61},{"ruleId":"382","severity":2,"message":"383","line":27,"column":9,"nodeType":"469","messageId":"385","endLine":27,"endColumn":41},{"ruleId":"414","severity":2,"message":"470","line":27,"column":20,"nodeType":"416","messageId":"417","endLine":27,"endColumn":31},{"ruleId":"382","severity":2,"message":"383","line":28,"column":9,"nodeType":"469","messageId":"385","endLine":28,"endColumn":37},{"ruleId":"414","severity":2,"message":"470","line":28,"column":18,"nodeType":"416","messageId":"417","endLine":28,"endColumn":29},{"ruleId":"382","severity":2,"message":"383","line":29,"column":9,"nodeType":"469","messageId":"385","endLine":29,"endColumn":41},{"ruleId":"414","severity":2,"message":"470","line":29,"column":20,"nodeType":"416","messageId":"417","endLine":29,"endColumn":31},{"ruleId":"382","severity":2,"message":"383","line":30,"column":9,"nodeType":"469","messageId":"385","endLine":30,"endColumn":40},{"ruleId":"414","severity":2,"message":"470","line":30,"column":19,"nodeType":"416","messageId":"417","endLine":30,"endColumn":30},{"ruleId":"430","severity":1,"message":"431","line":36,"column":3,"nodeType":"433","messageId":"432","endLine":36,"endColumn":17},{"ruleId":"358","severity":1,"message":"381","line":58,"column":3,"nodeType":"360","messageId":"361","endLine":58,"endColumn":19},{"ruleId":"382","severity":2,"message":"383","line":61,"column":9,"nodeType":"384","messageId":"385","endLine":66,"endColumn":29},{"ruleId":"435","severity":2,"message":"450","line":71,"column":9,"nodeType":"384","messageId":"437","endLine":71,"endColumn":45,"fix":"471"},{"ruleId":"435","severity":2,"message":"450","line":72,"column":9,"nodeType":"384","messageId":"437","endLine":72,"endColumn":43,"fix":"472"},{"ruleId":"382","severity":2,"message":"383","line":74,"column":9,"nodeType":"384","messageId":"385","endLine":74,"endColumn":49},{"ruleId":"414","severity":2,"message":"473","line":76,"column":5,"nodeType":"416","messageId":"417","endLine":76,"endColumn":26},{"ruleId":"466","severity":2,"message":"467","line":76,"column":5,"nodeType":"416","messageId":"468","endLine":76,"endColumn":26},{"ruleId":"414","severity":2,"message":"473","line":78,"column":5,"nodeType":"416","messageId":"417","endLine":78,"endColumn":26},{"ruleId":"466","severity":2,"message":"467","line":78,"column":5,"nodeType":"416","messageId":"468","endLine":78,"endColumn":26},{"ruleId":"382","severity":2,"message":"383","line":80,"column":9,"nodeType":"384","messageId":"385","endLine":80,"endColumn":74},{"ruleId":"414","severity":2,"message":"474","line":80,"column":55,"nodeType":"416","messageId":"417","endLine":80,"endColumn":67},{"ruleId":"382","severity":2,"message":"383","line":81,"column":9,"nodeType":"384","messageId":"385","endLine":81,"endColumn":74},{"ruleId":"414","severity":2,"message":"475","line":81,"column":55,"nodeType":"416","messageId":"417","endLine":81,"endColumn":67},{"ruleId":"382","severity":2,"message":"383","line":88,"column":46,"nodeType":"469","messageId":"385","endLine":88,"endColumn":60},{"ruleId":"358","severity":1,"message":"381","line":145,"column":3,"nodeType":"360","messageId":"361","endLine":145,"endColumn":19},{"ruleId":"358","severity":1,"message":"476","line":150,"column":5,"nodeType":"360","messageId":"361","endLine":150,"endColumn":9},{"ruleId":"435","severity":2,"message":"450","line":156,"column":9,"nodeType":"384","messageId":"437","endLine":156,"endColumn":45,"fix":"477"},{"ruleId":"435","severity":2,"message":"450","line":157,"column":9,"nodeType":"384","messageId":"437","endLine":157,"endColumn":43,"fix":"478"},{"ruleId":"358","severity":1,"message":"381","line":227,"column":3,"nodeType":"360","messageId":"361","endLine":227,"endColumn":19},{"ruleId":"382","severity":2,"message":"383","line":234,"column":9,"nodeType":"384","messageId":"385","endLine":241,"endColumn":29},{"ruleId":"382","severity":2,"message":"383","line":243,"column":9,"nodeType":"384","messageId":"385","endLine":243,"endColumn":41},{"ruleId":"382","severity":2,"message":"383","line":244,"column":9,"nodeType":"384","messageId":"385","endLine":244,"endColumn":37},{"ruleId":"382","severity":2,"message":"383","line":245,"column":9,"nodeType":"384","messageId":"385","endLine":245,"endColumn":45},{"ruleId":"414","severity":2,"message":"474","line":245,"column":33,"nodeType":"416","messageId":"417","endLine":245,"endColumn":45},{"ruleId":"382","severity":2,"message":"383","line":246,"column":9,"nodeType":"384","messageId":"385","endLine":246,"endColumn":45},{"ruleId":"414","severity":2,"message":"475","line":246,"column":33,"nodeType":"416","messageId":"417","endLine":246,"endColumn":45},{"ruleId":"414","severity":2,"message":"479","line":248,"column":5,"nodeType":"416","messageId":"417","endLine":248,"endColumn":22},{"ruleId":"466","severity":2,"message":"467","line":248,"column":5,"nodeType":"416","messageId":"468","endLine":248,"endColumn":22},{"ruleId":"414","severity":2,"message":"473","line":251,"column":5,"nodeType":"416","messageId":"417","endLine":251,"endColumn":26},{"ruleId":"466","severity":2,"message":"467","line":251,"column":5,"nodeType":"416","messageId":"468","endLine":251,"endColumn":26},{"ruleId":"414","severity":2,"message":"473","line":253,"column":9,"nodeType":"416","messageId":"417","endLine":253,"endColumn":30},{"ruleId":"466","severity":2,"message":"467","line":253,"column":9,"nodeType":"416","messageId":"468","endLine":253,"endColumn":30},{"ruleId":"435","severity":2,"message":"450","line":257,"column":9,"nodeType":"384","messageId":"437","endLine":257,"endColumn":45,"fix":"480"},{"ruleId":"435","severity":2,"message":"450","line":258,"column":9,"nodeType":"384","messageId":"437","endLine":258,"endColumn":43,"fix":"481"},{"ruleId":"358","severity":1,"message":"381","line":339,"column":3,"nodeType":"360","messageId":"361","endLine":339,"endColumn":19},{"ruleId":"382","severity":2,"message":"383","line":346,"column":9,"nodeType":"384","messageId":"385","endLine":353,"endColumn":29},{"ruleId":"382","severity":2,"message":"383","line":355,"column":9,"nodeType":"384","messageId":"385","endLine":355,"endColumn":41},{"ruleId":"382","severity":2,"message":"383","line":356,"column":9,"nodeType":"384","messageId":"385","endLine":356,"endColumn":41},{"ruleId":"382","severity":2,"message":"383","line":357,"column":9,"nodeType":"384","messageId":"385","endLine":357,"endColumn":45},{"ruleId":"414","severity":2,"message":"474","line":357,"column":33,"nodeType":"416","messageId":"417","endLine":357,"endColumn":45},{"ruleId":"382","severity":2,"message":"383","line":358,"column":9,"nodeType":"384","messageId":"385","endLine":358,"endColumn":45},{"ruleId":"414","severity":2,"message":"475","line":358,"column":33,"nodeType":"416","messageId":"417","endLine":358,"endColumn":45},{"ruleId":"414","severity":2,"message":"479","line":360,"column":5,"nodeType":"416","messageId":"417","endLine":360,"endColumn":22},{"ruleId":"466","severity":2,"message":"467","line":360,"column":5,"nodeType":"416","messageId":"468","endLine":360,"endColumn":22},{"ruleId":"414","severity":2,"message":"473","line":363,"column":5,"nodeType":"416","messageId":"417","endLine":363,"endColumn":26},{"ruleId":"466","severity":2,"message":"467","line":363,"column":5,"nodeType":"416","messageId":"468","endLine":363,"endColumn":26},{"ruleId":"414","severity":2,"message":"473","line":365,"column":9,"nodeType":"416","messageId":"417","endLine":365,"endColumn":30},{"ruleId":"466","severity":2,"message":"467","line":365,"column":9,"nodeType":"416","messageId":"468","endLine":365,"endColumn":30},{"ruleId":"435","severity":2,"message":"450","line":369,"column":9,"nodeType":"384","messageId":"437","endLine":369,"endColumn":45,"fix":"482"},{"ruleId":"435","severity":2,"message":"450","line":370,"column":9,"nodeType":"384","messageId":"437","endLine":370,"endColumn":43,"fix":"483"},{"ruleId":"358","severity":1,"message":"460","line":16,"column":55,"nodeType":"360","messageId":"361","endLine":16,"endColumn":60},{"ruleId":"430","severity":1,"message":"431","line":40,"column":3,"nodeType":"433","messageId":"432","endLine":40,"endColumn":17},{"ruleId":"358","severity":1,"message":"460","line":22,"column":67,"nodeType":"360","messageId":"361","endLine":22,"endColumn":72},{"ruleId":"430","severity":1,"message":"431","line":42,"column":3,"nodeType":"433","messageId":"432","endLine":42,"endColumn":17},{"ruleId":"358","severity":1,"message":"484","line":6,"column":3,"nodeType":"360","messageId":"361","endLine":6,"endColumn":12},{"ruleId":"358","severity":1,"message":"485","line":16,"column":3,"nodeType":"360","messageId":"361","endLine":16,"endColumn":14},{"ruleId":"358","severity":1,"message":"486","line":20,"column":10,"nodeType":"360","messageId":"361","endLine":20,"endColumn":23},{"ruleId":"358","severity":1,"message":"381","line":64,"column":3,"nodeType":"360","messageId":"361","endLine":64,"endColumn":19},{"ruleId":"382","severity":2,"message":"383","line":74,"column":9,"nodeType":"384","messageId":"385","endLine":74,"endColumn":43},{"ruleId":"386","severity":1,"message":"387","line":74,"column":15,"nodeType":"388","messageId":"389","endLine":74,"endColumn":18,"suggestions":"487"},{"ruleId":"391","severity":2,"message":"392","line":76,"column":7,"nodeType":"360","messageId":"393","endLine":76,"endColumn":17,"fix":"488"},{"ruleId":"391","severity":2,"message":"489","line":77,"column":7,"nodeType":"360","messageId":"393","endLine":77,"endColumn":29,"fix":"490"},{"ruleId":"391","severity":2,"message":"397","line":78,"column":7,"nodeType":"360","messageId":"393","endLine":78,"endColumn":25,"fix":"491"},{"ruleId":"382","severity":2,"message":"383","line":80,"column":7,"nodeType":"384","messageId":"385","endLine":80,"endColumn":37},{"ruleId":"391","severity":2,"message":"399","line":80,"column":9,"nodeType":"360","messageId":"393","endLine":80,"endColumn":14,"fix":"492"},{"ruleId":"391","severity":2,"message":"401","line":80,"column":16,"nodeType":"360","messageId":"393","endLine":80,"endColumn":22,"fix":"493"},{"ruleId":"382","severity":2,"message":"383","line":82,"column":7,"nodeType":"384","messageId":"385","endLine":89,"endColumn":23},{"ruleId":"391","severity":2,"message":"494","line":83,"column":5,"nodeType":"360","messageId":"393","endLine":83,"endColumn":9,"fix":"495"},{"ruleId":"391","severity":2,"message":"496","line":84,"column":5,"nodeType":"360","messageId":"393","endLine":84,"endColumn":13,"fix":"497"},{"ruleId":"391","severity":2,"message":"498","line":85,"column":5,"nodeType":"360","messageId":"393","endLine":85,"endColumn":10,"fix":"499"},{"ruleId":"391","severity":2,"message":"407","line":86,"column":5,"nodeType":"360","messageId":"393","endLine":86,"endColumn":17,"fix":"500"},{"ruleId":"391","severity":2,"message":"501","line":87,"column":5,"nodeType":"360","messageId":"393","endLine":87,"endColumn":14,"fix":"502"},{"ruleId":"391","severity":2,"message":"503","line":88,"column":5,"nodeType":"360","messageId":"393","endLine":88,"endColumn":16,"fix":"504"},{"ruleId":"382","severity":2,"message":"383","line":105,"column":3,"nodeType":"413","messageId":"385","endLine":105,"endColumn":49},{"ruleId":"414","severity":2,"message":"415","line":105,"column":25,"nodeType":"416","messageId":"417","endLine":105,"endColumn":38},{"ruleId":"382","severity":2,"message":"383","line":106,"column":3,"nodeType":"413","messageId":"385","endLine":106,"endColumn":45},{"ruleId":"414","severity":2,"message":"415","line":106,"column":23,"nodeType":"416","messageId":"417","endLine":106,"endColumn":36},{"ruleId":"391","severity":2,"message":"424","line":109,"column":12,"nodeType":"360","messageId":"393","endLine":109,"endColumn":17,"fix":"505"},{"ruleId":"414","severity":2,"message":"426","line":109,"column":21,"nodeType":"416","messageId":"417","endLine":109,"endColumn":31},{"ruleId":"391","severity":2,"message":"427","line":110,"column":9,"nodeType":"360","messageId":"393","endLine":110,"endColumn":18,"fix":"506"},{"ruleId":"358","severity":1,"message":"507","line":122,"column":11,"nodeType":"360","messageId":"361","endLine":122,"endColumn":24},{"ruleId":"414","severity":2,"message":"426","line":122,"column":39,"nodeType":"416","messageId":"417","endLine":122,"endColumn":49},{"ruleId":"358","severity":1,"message":"381","line":177,"column":3,"nodeType":"360","messageId":"361","endLine":177,"endColumn":19},{"ruleId":"358","severity":1,"message":"429","line":179,"column":9,"nodeType":"360","messageId":"361","endLine":179,"endColumn":20},{"ruleId":"358","severity":1,"message":"381","line":222,"column":3,"nodeType":"360","messageId":"361","endLine":222,"endColumn":19},{"ruleId":"358","severity":1,"message":"429","line":224,"column":9,"nodeType":"360","messageId":"361","endLine":224,"endColumn":20},{"ruleId":"419","severity":2,"message":"420","line":233,"column":3,"nodeType":"421","messageId":"422","endLine":233,"endColumn":35,"suggestions":"508"},{"ruleId":"358","severity":1,"message":"381","line":254,"column":3,"nodeType":"360","messageId":"361","endLine":254,"endColumn":19},{"ruleId":"358","severity":1,"message":"429","line":256,"column":9,"nodeType":"360","messageId":"361","endLine":256,"endColumn":20},{"ruleId":"419","severity":2,"message":"420","line":266,"column":3,"nodeType":"421","messageId":"422","endLine":266,"endColumn":35,"suggestions":"509"},{"ruleId":"358","severity":1,"message":"381","line":288,"column":3,"nodeType":"360","messageId":"361","endLine":288,"endColumn":19},{"ruleId":"358","severity":1,"message":"429","line":290,"column":9,"nodeType":"360","messageId":"361","endLine":290,"endColumn":20},{"ruleId":"510","severity":2,"message":"511","line":309,"column":3,"nodeType":"512","messageId":"513","endLine":315,"endColumn":4},{"ruleId":"391","severity":2,"message":"424","line":309,"column":12,"nodeType":"360","messageId":"393","endLine":309,"endColumn":17,"fix":"514"},{"ruleId":"391","severity":2,"message":"515","line":310,"column":9,"nodeType":"360","messageId":"393","endLine":310,"endColumn":18,"fix":"516"},{"ruleId":"358","severity":1,"message":"381","line":332,"column":3,"nodeType":"360","messageId":"361","endLine":332,"endColumn":19},{"ruleId":"391","severity":2,"message":"517","line":334,"column":12,"nodeType":"360","messageId":"393","endLine":334,"endColumn":18,"fix":"518"},{"ruleId":"358","severity":1,"message":"476","line":336,"column":11,"nodeType":"360","messageId":"361","endLine":336,"endColumn":23},{"ruleId":"386","severity":1,"message":"387","line":343,"column":24,"nodeType":"388","messageId":"389","endLine":343,"endColumn":27,"suggestions":"519"},{"ruleId":"520","severity":2,"message":"521","line":343,"column":46,"nodeType":"522","messageId":"523","endLine":343,"endColumn":67,"fix":"524"},{"ruleId":"414","severity":2,"message":"525","line":344,"column":33,"nodeType":"416","messageId":"417","endLine":344,"endColumn":49},{"ruleId":"391","severity":2,"message":"526","line":346,"column":9,"nodeType":"360","messageId":"393","endLine":346,"endColumn":21,"fix":"527"},{"ruleId":"453","severity":2,"message":"454","line":357,"column":29,"nodeType":"455","messageId":"456","endLine":360,"endColumn":6},{"ruleId":"430","severity":1,"message":"431","line":68,"column":3,"nodeType":"433","messageId":"432","endLine":68,"endColumn":17},{"ruleId":"382","severity":2,"message":"383","line":7,"column":11,"nodeType":"384","messageId":"385","endLine":7,"endColumn":28},{"ruleId":"466","severity":2,"message":"528","line":7,"column":18,"nodeType":"529","messageId":"530","endLine":7,"endColumn":28},{"ruleId":"531","severity":2,"message":"532","line":9,"column":17,"nodeType":"533","messageId":"534","endLine":9,"endColumn":55},{"ruleId":"414","severity":2,"message":"535","line":9,"column":48,"nodeType":"416","messageId":"417","endLine":9,"endColumn":55},"@typescript-eslint/no-unused-vars","'_context' is defined but never used.","Identifier","unusedVar","@typescript-eslint/require-await","Async arrow function 'hello' has no 'await' expression.","ArrowFunctionExpression","missingAwait","'Integer' is defined but never used.","'DatabaseType' is defined but never used.","'DB_HOST' is assigned a value but never used.","'DB_PORT' is assigned a value but never used.","'DB_PASSWORD' is assigned a value but never used.","'DB_SYNCHRONIZE' is assigned a value but never used.","@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment","'JoinColumn' is defined but never used.","'CreateDateColumn' is defined but never used.","'UpdateDateColumn' is defined but never used.","'Unique' is defined but never used.","'_' is defined but never used.","'context' is defined but never used.","@typescript-eslint/no-unsafe-assignment","Unsafe assignment of an any value.","VariableDeclarator","anyAssignment","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["536","537"],"prefer-const","'post' is never reassigned. Use 'const' instead.","useConst",{"range":"538","text":"539"},"'postBusiness' is never reassigned. Use 'const' instead.",{"range":"540","text":"539"},"'location' is never reassigned. Use 'const' instead.",{"range":"541","text":"539"},"'title' is never reassigned. Use 'const' instead.",{"range":"542","text":"539"},"'number' is never reassigned. Use 'const' instead.",{"range":"542","text":"539"},"'detailTitle' is never reassigned. Use 'const' instead.",{"range":"543","text":"539"},"'address' is never reassigned. Use 'const' instead.",{"range":"543","text":"539"},"'descriptions' is never reassigned. Use 'const' instead.",{"range":"543","text":"539"},"'workingHoursDescriptions' is never reassigned. Use 'const' instead.",{"range":"543","text":"539"},"'homepage' is never reassigned. Use 'const' instead.",{"range":"543","text":"539"},"AssignmentExpression","@typescript-eslint/no-unsafe-member-access","Unsafe member access .location on an any value.","MemberExpression","unsafeMemberExpression","Unsafe member access .workingHours on an any value.","@typescript-eslint/no-floating-promises","Promises must be handled appropriately or explicitly marked as ignored with the `void` operator.","ExpressionStatement","floatingVoid",["544"],"'index' is never reassigned. Use 'const' instead.",{"range":"545","text":"539"},"Unsafe member access .image on an any value.","'imageName' is never reassigned. Use 'const' instead.",{"range":"546","text":"539"},"'uid' is assigned a value but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","missingReturnType","FunctionExpression","'reverse' is defined but never used.","@typescript-eslint/no-inferrable-types","Type string trivially inferred from a string literal, remove type annotation.","noInferrableType",{"range":"547","text":"548"},"'event' is defined but never used.","Async arrow function 'onDefault' has no 'await' expression.","Unsafe member access .uid on an any value.","Unsafe member access .message on an any value.","Unsafe member access .postId on an any value.","Unsafe member access .receiveId on an any value.","'chat' is never reassigned. Use 'const' instead.",{"range":"549","text":"539"},"Async arrow function 'onDisconnect' has no 'await' expression.",["550"],["551"],"Type number trivially inferred from a number literal, remove type annotation.",{"range":"552","text":"548"},{"range":"553","text":"548"},"@typescript-eslint/await-thenable","Unexpected `await` of a non-Promise (non-\"Thenable\") value.","AwaitExpression","await",{"range":"554","text":"548"},{"range":"555","text":"548"},["556"],"'index' is defined but never used.","'CommentData' is defined but never used.","Argument 'comment' should be typed with a non-any type.","anyTypedArg",["557","558"],"Unsafe member access .map on an any value.","@typescript-eslint/no-unsafe-call","Unsafe call of an any typed value.","unsafeCall","Property","Unsafe member access .reply on an any value.",{"range":"559","text":"548"},{"range":"560","text":"548"},"Unsafe member access .toLowerCase on an any value.","Unsafe member access .min on an any value.","Unsafe member access .max on an any value.","'type' is assigned a value but never used.",{"range":"561","text":"548"},{"range":"562","text":"548"},"Unsafe member access .toUpperCase on an any value.",{"range":"563","text":"548"},{"range":"564","text":"548"},{"range":"565","text":"548"},{"range":"566","text":"548"},"'SQSRecord' is defined but never used.","'sendMessage' is defined but never used.","'getRepository' is defined but never used.",["567","568"],{"range":"569","text":"539"},"'postNormal' is never reassigned. Use 'const' instead.",{"range":"570","text":"539"},{"range":"571","text":"539"},{"range":"572","text":"539"},{"range":"572","text":"539"},"'type' is never reassigned. Use 'const' instead.",{"range":"573","text":"539"},"'category' is never reassigned. Use 'const' instead.",{"range":"573","text":"539"},"'price' is never reassigned. Use 'const' instead.",{"range":"573","text":"539"},{"range":"573","text":"539"},"'condition' is never reassigned. Use 'const' instead.",{"range":"573","text":"539"},"'firmOnPrice' is never reassigned. Use 'const' instead.",{"range":"573","text":"539"},{"range":"574","text":"539"},{"range":"575","text":"539"},"'originalImage' is assigned a value but never used.",["576"],["577"],"@typescript-eslint/no-for-in-array","For-in loops over arrays are forbidden. Use for-of or array.forEach instead.","ForInStatement","forInViolation",{"range":"578","text":"539"},"'objecyKey' is never reassigned. Use 'const' instead.",{"range":"579","text":"539"},"'record' is never reassigned. Use 'const' instead.",{"range":"580","text":"539"},["581","582"],"@typescript-eslint/no-unnecessary-type-assertion","This assertion is unnecessary since it does not change the type of the expression.","TSAsExpression","unnecessaryAssertion",{"range":"583","text":"548"},"Unsafe member access .Body on an any value.","'image' is never reassigned. Use 'const' instead.",{"range":"584","text":"539"},"Unsafe construction of an any type value.","NewExpression","unsafeNew","@typescript-eslint/restrict-plus-operands","Operands of '+' operation must either be both strings or both numbers. Consider using a template literal.","BinaryExpression","notStrings","Unsafe member access .id on an any value.",{"messageId":"585","fix":"586","desc":"587"},{"messageId":"588","fix":"589","desc":"590"},[2851,2854],"const",[2882,2885],[2937,2940],[2981,2984],[3020,3023],{"messageId":"591","fix":"592","desc":"593"},[3791,3794],[3822,3825],[532,540],"",[2210,2213],{"messageId":"591","fix":"594","desc":"593"},{"messageId":"591","fix":"595","desc":"593"},[4610,4618],[4655,4663],[6810,6818],[6855,6863],{"messageId":"591","fix":"596","desc":"593"},{"messageId":"585","fix":"597","desc":"587"},{"messageId":"588","fix":"598","desc":"590"},[2414,2422],[2459,2467],[5179,5187],[5224,5232],[8239,8247],[8284,8292],[11618,11626],[11663,11671],{"messageId":"585","fix":"599","desc":"587"},{"messageId":"588","fix":"600","desc":"590"},[2920,2923],[2951,2954],[3000,3003],[3044,3047],[3083,3086],[3785,3788],[3816,3819],{"messageId":"591","fix":"601","desc":"593"},{"messageId":"591","fix":"602","desc":"593"},[9384,9387],[9425,9428],[9913,9916],{"messageId":"585","fix":"603","desc":"587"},{"messageId":"588","fix":"604","desc":"590"},[10324,10333],[10401,10404],"suggestUnknown",{"range":"605","text":"606"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"605","text":"607"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","floatingFixVoid",{"range":"608","text":"609"},"Add void operator to ignore.",{"range":"610","text":"611"},{"range":"612","text":"613"},{"range":"614","text":"613"},{"range":"615","text":"606"},{"range":"615","text":"607"},{"range":"616","text":"606"},{"range":"616","text":"607"},{"range":"617","text":"618"},{"range":"619","text":"618"},{"range":"620","text":"606"},{"range":"620","text":"607"},[2818,2821],"unknown","never",[3740,3782],"void postBusinessRepository.save(postBusiness);",[2022,2054],"void commentRepository.save(comment);",[3299,3337],"void commentRepository.save(commentEntity);",[8714,8752],[419,422],[2887,2890],[7255,7287],"void postRepository.save(postEntity);",[8247,8279],[10290,10293]]