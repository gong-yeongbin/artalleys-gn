{
  "service": {
    "service": "goodneibors",
    "serviceObject": {
      "name": "goodneibors"
    },
    "provider": {
      "name": "aws",
      "stage": "prod",
      "runtime": "nodejs12.x",
      "region": "us-east-2",
      "websocketsApiRouteSelectionExpression": "$request.body.action",
      "apiGateway": {
        "minimumCompressionSize": 1024
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:*"
          ],
          "Resource": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::artalleys-gn-image-bucket",
                "/*"
              ]
            ]
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:*"
          ],
          "Resource": "*"
        }
      ],
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "environment": {
        "DB_TYPE": "mysql",
        "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
        "DB_PORT": "3306",
        "DB_USERNAME": "root",
        "DB_PASSWORD": "neibors1!",
        "DB_DATABASE": "gn",
        "DB_SYNCHRONIZE": "true",
        "BUCKET_NAME": "artalleys-gn-image-bucket",
        "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
        "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
        "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
        "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
        "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
        "isWebpacked": true
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-hello"
            }
          },
          "CreatePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-createPost"
            }
          },
          "CreateBusinessLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-createBusiness"
            }
          },
          "GetPostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getPost"
            }
          },
          "GetBusinessLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getBusiness"
            }
          },
          "HidePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-hidePost"
            }
          },
          "BoostPostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-boostPost"
            }
          },
          "DeletePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-deletePost"
            }
          },
          "GetFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getFeed"
            }
          },
          "GetCategoryFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getCategoryFeed"
            }
          },
          "GetSearchFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getSearchFeed"
            }
          },
          "GetBusinessFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getBusinessFeed"
            }
          },
          "AddCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-addComment"
            }
          },
          "GetCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getComment"
            }
          },
          "ModifyCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-modifyComment"
            }
          },
          "DeleteCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-deleteComment"
            }
          },
          "GetReplyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getReply"
            }
          },
          "ImageResizeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-imageResize"
            }
          },
          "OnConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-onConnect"
            }
          },
          "OnConnect2LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-onConnect2"
            }
          },
          "OnDisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-onDisconnect"
            }
          },
          "OnDefaultLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-onDefault"
            }
          },
          "OnSendMessageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-onSendMessage"
            }
          },
          "GetChatRoomListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getChatRoomList"
            }
          },
          "GetChatContentListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/goodneibors-prod-getChatContentList"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "goodneibors",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/goodneibors-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/goodneibors-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "goodneibors",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-hello",
              "Handler": "handler.hello",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "HelloLogGroup"
            ]
          },
          "HelloLambdaVersionG9Ol411KSKszGJRWCAHxdTBoTUgYrQgLPioGwSKVCDI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "CreatePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-createPost",
              "Handler": "services/post/handler.createPost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "CreatePostLogGroup"
            ]
          },
          "CreatePostLambdaVersionWeL0c26j0TUYrNzL1vPwSYVcdKQA8GcVUzZ3NCd5A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePostLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "CreateBusinessLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-createBusiness",
              "Handler": "services/business/handler.createBusiness",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "CreateBusinessLogGroup"
            ]
          },
          "CreateBusinessLambdaVersionloxo8l8cDgVq3GrXVbUVMYnGmNp3Swx9YmuBwDIibmY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBusinessLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetPostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getPost",
              "Handler": "services/post/handler.getPost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetPostLogGroup"
            ]
          },
          "GetPostLambdaVersionp7dHIjJVaUjN9vmfmn487VIfou5cbOnMQ907UpTAI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPostLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetBusinessLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getBusiness",
              "Handler": "services/business/handler.getBusiness",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetBusinessLogGroup"
            ]
          },
          "GetBusinessLambdaVersionR2fzfVU782lQebvTEs7tkyngT4hT6wSp4mCydAy5E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetBusinessLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "HidePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-hidePost",
              "Handler": "services/post/handler.hidePost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "HidePostLogGroup"
            ]
          },
          "HidePostLambdaVersioneuYXMvMN0yFP8XJFDsFlkKxVjnafJvz4zM7N9m9lXyg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HidePostLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "BoostPostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-boostPost",
              "Handler": "services/post/handler.boostPost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "BoostPostLogGroup"
            ]
          },
          "BoostPostLambdaVersiony953zuNfFSMlNy1eTqbYGaU60nIKLgsbUiYwk4PfQk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BoostPostLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "DeletePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-deletePost",
              "Handler": "services/post/handler.deletePost",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "DeletePostLogGroup"
            ]
          },
          "DeletePostLambdaVersionoKEsTjtq6ebzbe1Bw9FSovtn9d8AYN2MBIRsP4xDUw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePostLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getFeed",
              "Handler": "services/feed/handler.getFeed",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetFeedLogGroup"
            ]
          },
          "GetFeedLambdaVersionGDX1GfExCnSOuUEk1tPDvbhS15aX5eJsgXdTh2HuWQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFeedLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetCategoryFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getCategoryFeed",
              "Handler": "services/feed/handler.getCategoryFeed",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetCategoryFeedLogGroup"
            ]
          },
          "GetCategoryFeedLambdaVersionXLeqQPvws1XLWM7txyyoFzJU0IFlrNxghR99DweXh0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCategoryFeedLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetSearchFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getSearchFeed",
              "Handler": "services/feed/handler.getSearchFeed",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetSearchFeedLogGroup"
            ]
          },
          "GetSearchFeedLambdaVersionBVzotbO4KCWZVhwY4q5vhuKHha0XWLfzTaUUqQLQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSearchFeedLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetBusinessFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getBusinessFeed",
              "Handler": "services/feed/handler.getBusinessFeed",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetBusinessFeedLogGroup"
            ]
          },
          "GetBusinessFeedLambdaVersionGdfDsbWW6HzlbRpvkf5jLvc3jwetEzqahAM2OD8M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetBusinessFeedLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "AddCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-addComment",
              "Handler": "services/comment/handler.addComment",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "AddCommentLogGroup"
            ]
          },
          "AddCommentLambdaVersionnm4aduo2hwnEAMYfNTHEp8pfzJE7o1bilikngyeZig": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddCommentLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getComment",
              "Handler": "services/comment/handler.getComment",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetCommentLogGroup"
            ]
          },
          "GetCommentLambdaVersionZRGj2w2RFCgeFpU2w7uPxayJJVMNJ6DKocbUqvIfkk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCommentLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "ModifyCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-modifyComment",
              "Handler": "services/comment/handler.modifyComment",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "ModifyCommentLogGroup"
            ]
          },
          "ModifyCommentLambdaVersionVOQk8UXwgLakpAvcqGYybAWVvw0Rgf1BI6x9v3kVlI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ModifyCommentLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "DeleteCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-deleteComment",
              "Handler": "services/comment/handler.deleteComment",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "DeleteCommentLogGroup"
            ]
          },
          "DeleteCommentLambdaVersionzQpEn1Mik4chBE3UIYHsT81cXr3tyrtCf2n2ixdZ4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCommentLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetReplyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getReply",
              "Handler": "services/comment/handler.getReply",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetReplyLogGroup"
            ]
          },
          "GetReplyLambdaVersioni1h3weT1Jtt3BlvTI3hSsYARRsqQlgK1qrbDGLOs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetReplyLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "ImageResizeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-imageResize",
              "Handler": "services/post/handler.imageResize",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "ImageResizeLogGroup"
            ]
          },
          "ImageResizeLambdaVersionTNPuxBUqM54ciTSGxT5Sylqn8oiPYMNdDtHcSZ31iU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ImageResizeLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "OnConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-onConnect",
              "Handler": "services/chat-socket/handler.onConnect",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "OnConnectLogGroup"
            ]
          },
          "OnConnectLambdaVersion6SyNDg6g6swOxTe6l1azXwngoCOpUB3JHZVE5VSs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnConnectLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "OnConnect2LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-onConnect2",
              "Handler": "services/chat-socket/handler.onConnect2",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "OnConnect2LogGroup"
            ]
          },
          "OnConnect2LambdaVersionTY34JJo5Lav9pXBkGdi8azfpxL9dLDNpMrGn4V32E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnConnect2LambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "OnDisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-onDisconnect",
              "Handler": "services/chat-socket/handler.onDisconnect",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "OnDisconnectLogGroup"
            ]
          },
          "OnDisconnectLambdaVersionb7U5YsnrqtYDrnslr5g2Ur1xIzY3ligjC6I8qTU8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnDisconnectLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "OnDefaultLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-onDefault",
              "Handler": "services/chat-socket/handler.onDefault",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "OnDefaultLogGroup"
            ]
          },
          "OnDefaultLambdaVersionMRnYKmyhvKIoFPz5v8R8sKERVSVLHnCCIRdFt6hqQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnDefaultLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "OnSendMessageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-onSendMessage",
              "Handler": "services/chat-socket/handler.onSendMessage",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "OnSendMessageLogGroup"
            ]
          },
          "OnSendMessageLambdaVersiongc7Qj7XQAgbo6u9rsFc6KTOwH3NTaJqsL0NQ2gGfo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnSendMessageLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetChatRoomListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getChatRoomList",
              "Handler": "services/chat-socket/handler.getChatRoomList",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetChatRoomListLogGroup"
            ]
          },
          "GetChatRoomListLambdaVersionqR3aq1L8t36TaLMs1rWM4aX4AeV9WvmUzEsP7fUpY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetChatRoomListLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "GetChatContentListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z/goodneibors.zip"
              },
              "FunctionName": "goodneibors-prod-getChatContentList",
              "Handler": "services/chat-socket/handler.getChatContentList",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_TYPE": "mysql",
                  "DB_HOST": "artalleys-gn.c1ysglv9xt3u.us-east-2.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "DB_USERNAME": "root",
                  "DB_PASSWORD": "neibors1!",
                  "DB_DATABASE": "gn",
                  "DB_SYNCHRONIZE": "true",
                  "BUCKET_NAME": "artalleys-gn-image-bucket",
                  "BUCKET_SERVICE_ENDPOINT": "s3.us-east-2.amazonaws.com",
                  "CLOUDFRONT_IMAGE": "d19j7dhfxgaxy7.cloudfront.net",
                  "SQS_IMAGE_RESIZE_ENDPOIN_URL": "https://sqs.us-east-2.amazonaws.com/",
                  "SQS_IMAGE_RESIZE_QUEUE_URL": "https://sqs.us-east-2.amazonaws.com/950146448607/artalleys-gn-image-resize",
                  "SQS_IMAGE_RESIZE_ARN": "arn:aws:sqs:us-east-2:950146448607:artalleys-gn-image-resize",
                  "isWebpacked": true
                }
              }
            },
            "DependsOn": [
              "GetChatContentListLogGroup"
            ]
          },
          "GetChatContentListLambdaVersionk9aPo5CBjqsEJOEVoiWiBTpBqacIVKyZ6fPX3KlY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetChatContentListLambdaFunction"
              },
              "CodeSha256": "4B6DU+WrbKCpYpzmL0xstrZeBcx3C3JfVUJJJs8X9Vc="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-goodneibors",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourceHello": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "hello",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePost": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "post",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostCreatepost": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePost"
              },
              "PathPart": "createPost",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostCreatebusiness": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePost"
              },
              "PathPart": "createBusiness",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostPostidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePost"
              },
              "PathPart": "{postId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostPostidVarGetpost": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePostPostidVar"
              },
              "PathPart": "getPost",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostPostidVarGetbusiness": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePostPostidVar"
              },
              "PathPart": "getBusiness",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostPostidVarHidepost": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePostPostidVar"
              },
              "PathPart": "hidePost",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostPostidVarBoostpost": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePostPostidVar"
              },
              "PathPart": "boostPost",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostPostidVarDeletepost": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePostPostidVar"
              },
              "PathPart": "deletePost",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFeed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "feed",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFeedGetfeed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFeed"
              },
              "PathPart": "getFeed",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFeedGetcategoryfeed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFeed"
              },
              "PathPart": "getCategoryFeed",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFeedGetsearchfeed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFeed"
              },
              "PathPart": "getSearchFeed",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFeedGetbusinessfeed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFeed"
              },
              "PathPart": "getBusinessFeed",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceComment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "comment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentPostidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceComment"
              },
              "PathPart": "{postId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentPostidVarAddcomment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCommentPostidVar"
              },
              "PathPart": "addComment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentPostidVarGetcomment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCommentPostidVar"
              },
              "PathPart": "getComment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentPostidVarCommentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCommentPostidVar"
              },
              "PathPart": "{commentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentPostidVarCommentidVarGetreply": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCommentPostidVarCommentidVar"
              },
              "PathPart": "getReply",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentCommentidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceComment"
              },
              "PathPart": "{commentId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentCommentidVarModifycomment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCommentCommentidVar"
              },
              "PathPart": "modifyComment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCommentCommentidVarDeletecomment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCommentCommentidVar"
              },
              "PathPart": "deleteComment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceChat": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "chat",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceChatGetchatroomlist": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceChat"
              },
              "PathPart": "getChatRoomList",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceChatReceiveidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceChat"
              },
              "PathPart": "{receiveId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceChatReceiveidVarGetchatcontentlist": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceChatReceiveidVar"
              },
              "PathPart": "getChatContentList",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostCreatepostOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostCreatepost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostCreatebusinessOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostCreatebusiness"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostPostidVarGetpostOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarGetpost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostPostidVarGetbusinessOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarGetbusiness"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostPostidVarHidepostOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarHidepost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostPostidVarBoostpostOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarBoostpost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostPostidVarDeletepostOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarDeletepost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFeedGetfeedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFeedGetfeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFeedGetcategoryfeedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFeedGetcategoryfeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFeedGetsearchfeedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFeedGetsearchfeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFeedGetbusinessfeedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFeedGetbusinessfeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCommentPostidVarAddcommentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentPostidVarAddcomment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCommentPostidVarGetcommentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentPostidVarGetcomment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCommentCommentidVarModifycommentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentCommentidVarModifycomment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCommentCommentidVarDeletecommentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentCommentidVarDeletecomment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCommentPostidVarCommentidVarGetreplyOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentPostidVarCommentidVarGetreply"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodChatGetchatroomlistOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceChatGetchatroomlist"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodChatReceiveidVarGetchatcontentlistOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceChatReceiveidVarGetchatcontentlist"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostCreatepostPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostCreatepost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostCreatebusinessPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostCreatebusiness"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBusinessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostPostidVarGetpostGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.postId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarGetpost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostPostidVarGetbusinessGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.postId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarGetbusiness"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetBusinessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostPostidVarHidepostGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.postId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarHidepost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HidePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostPostidVarBoostpostGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.postId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarBoostpost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BoostPostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPostPostidVarDeletepostGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.postId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostPostidVarDeletepost"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFeedGetfeedPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.querystring.offset": false,
                "method.request.querystring.limit": false,
                "method.request.querystring.order": false,
                "method.request.querystring.type": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFeedGetfeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFeedLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFeedGetcategoryfeedPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.querystring.offset": false,
                "method.request.querystring.limit": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFeedGetcategoryfeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCategoryFeedLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFeedGetsearchfeedPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.querystring.offset": false,
                "method.request.querystring.limit": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFeedGetsearchfeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSearchFeedLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodFeedGetbusinessfeedGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.offset": false,
                "method.request.querystring.limit": false,
                "method.request.querystring.order": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFeedGetbusinessfeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetBusinessFeedLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCommentPostidVarAddcommentPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.postId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentPostidVarAddcomment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCommentPostidVarGetcommentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.offset": false,
                "method.request.querystring.limit": false,
                "method.request.querystring.order": false,
                "method.request.path.postId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentPostidVarGetcomment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCommentCommentidVarModifycommentPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.commentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentCommentidVarModifycomment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ModifyCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCommentCommentidVarDeletecommentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.commentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentCommentidVarDeletecomment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteCommentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCommentPostidVarCommentidVarGetreplyGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.offset": false,
                "method.request.querystring.limit": false,
                "method.request.querystring.order": false,
                "method.request.path.postId": true,
                "method.request.path.commentId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCommentPostidVarCommentidVarGetreply"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetReplyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodChatGetchatroomlistGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceChatGetchatroomlist"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetChatRoomListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodChatReceiveidVarGetchatcontentlistGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.offset": false,
                "method.request.querystring.limit": false,
                "method.request.path.receiveId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceChatReceiveidVarGetchatcontentlist"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetChatContentListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1609836882906": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodHelloOptions",
              "ApiGatewayMethodPostCreatepostOptions",
              "ApiGatewayMethodPostCreatebusinessOptions",
              "ApiGatewayMethodPostPostidVarGetpostOptions",
              "ApiGatewayMethodPostPostidVarGetbusinessOptions",
              "ApiGatewayMethodPostPostidVarHidepostOptions",
              "ApiGatewayMethodPostPostidVarBoostpostOptions",
              "ApiGatewayMethodPostPostidVarDeletepostOptions",
              "ApiGatewayMethodFeedGetfeedOptions",
              "ApiGatewayMethodFeedGetcategoryfeedOptions",
              "ApiGatewayMethodFeedGetsearchfeedOptions",
              "ApiGatewayMethodFeedGetbusinessfeedOptions",
              "ApiGatewayMethodCommentPostidVarAddcommentOptions",
              "ApiGatewayMethodCommentPostidVarGetcommentOptions",
              "ApiGatewayMethodCommentCommentidVarModifycommentOptions",
              "ApiGatewayMethodCommentCommentidVarDeletecommentOptions",
              "ApiGatewayMethodCommentPostidVarCommentidVarGetreplyOptions",
              "ApiGatewayMethodChatGetchatroomlistOptions",
              "ApiGatewayMethodChatReceiveidVarGetchatcontentlistOptions",
              "ApiGatewayMethodHelloGet",
              "ApiGatewayMethodPostCreatepostPut",
              "ApiGatewayMethodPostCreatebusinessPut",
              "ApiGatewayMethodPostPostidVarGetpostGet",
              "ApiGatewayMethodPostPostidVarGetbusinessGet",
              "ApiGatewayMethodPostPostidVarHidepostGet",
              "ApiGatewayMethodPostPostidVarBoostpostGet",
              "ApiGatewayMethodPostPostidVarDeletepostGet",
              "ApiGatewayMethodFeedGetfeedPut",
              "ApiGatewayMethodFeedGetcategoryfeedPut",
              "ApiGatewayMethodFeedGetsearchfeedPut",
              "ApiGatewayMethodFeedGetbusinessfeedGet",
              "ApiGatewayMethodCommentPostidVarAddcommentPut",
              "ApiGatewayMethodCommentPostidVarGetcommentGet",
              "ApiGatewayMethodCommentCommentidVarModifycommentPut",
              "ApiGatewayMethodCommentCommentidVarDeletecommentGet",
              "ApiGatewayMethodCommentPostidVarCommentidVarGetreplyGet",
              "ApiGatewayMethodChatGetchatroomlistGet",
              "ApiGatewayMethodChatReceiveidVarGetchatcontentlistGet"
            ]
          },
          "HelloLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreatePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBusinessLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBusinessLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetBusinessLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetBusinessLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HidePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HidePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BoostPostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BoostPostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeletePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFeedLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCategoryFeedLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCategoryFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSearchFeedLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSearchFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetBusinessFeedLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetBusinessFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ModifyCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ModifyCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteCommentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetReplyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetReplyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetChatRoomListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetChatRoomListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetChatContentListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetChatContentListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "prod-goodneibors-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "OnConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OnConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OnConnect2WebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OnConnect2LambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OnDisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OnDisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OnDefaultWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OnDefaultLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OnSendMessageWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OnSendMessageLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OnConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OnConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "OnConnect2LambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OnConnect2LambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnConnect2LambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "OnDisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OnDisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnDisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "OnDefaultLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OnDefaultLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnDefaultLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "OnSendMessageLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OnSendMessageLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnSendMessageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OnConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "connect2WebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "connect2",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OnConnect2WebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OnDisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OnDefaultWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "onSendMessageWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "onSendMessage",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OnSendMessageWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "prod",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeployment59jkvmCk3ZF7ocsRQPxFCjVmaysp5X4jf03oa98WQ"
              }
            }
          },
          "WebsocketsDeployment59jkvmCk3ZF7ocsRQPxFCjVmaysp5X4jf03oa98WQ": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "connect2WebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute",
              "onSendMessageWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionG9Ol411KSKszGJRWCAHxdTBoTUgYrQgLPioGwSKVCDI"
            }
          },
          "CreatePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePostLambdaVersionWeL0c26j0TUYrNzL1vPwSYVcdKQA8GcVUzZ3NCd5A"
            }
          },
          "CreateBusinessLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBusinessLambdaVersionloxo8l8cDgVq3GrXVbUVMYnGmNp3Swx9YmuBwDIibmY"
            }
          },
          "GetPostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPostLambdaVersionp7dHIjJVaUjN9vmfmn487VIfou5cbOnMQ907UpTAI"
            }
          },
          "GetBusinessLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetBusinessLambdaVersionR2fzfVU782lQebvTEs7tkyngT4hT6wSp4mCydAy5E"
            }
          },
          "HidePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HidePostLambdaVersioneuYXMvMN0yFP8XJFDsFlkKxVjnafJvz4zM7N9m9lXyg"
            }
          },
          "BoostPostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BoostPostLambdaVersiony953zuNfFSMlNy1eTqbYGaU60nIKLgsbUiYwk4PfQk"
            }
          },
          "DeletePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePostLambdaVersionoKEsTjtq6ebzbe1Bw9FSovtn9d8AYN2MBIRsP4xDUw"
            }
          },
          "GetFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFeedLambdaVersionGDX1GfExCnSOuUEk1tPDvbhS15aX5eJsgXdTh2HuWQ"
            }
          },
          "GetCategoryFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCategoryFeedLambdaVersionXLeqQPvws1XLWM7txyyoFzJU0IFlrNxghR99DweXh0"
            }
          },
          "GetSearchFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSearchFeedLambdaVersionBVzotbO4KCWZVhwY4q5vhuKHha0XWLfzTaUUqQLQ"
            }
          },
          "GetBusinessFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetBusinessFeedLambdaVersionGdfDsbWW6HzlbRpvkf5jLvc3jwetEzqahAM2OD8M"
            }
          },
          "AddCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddCommentLambdaVersionnm4aduo2hwnEAMYfNTHEp8pfzJE7o1bilikngyeZig"
            }
          },
          "GetCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCommentLambdaVersionZRGj2w2RFCgeFpU2w7uPxayJJVMNJ6DKocbUqvIfkk"
            }
          },
          "ModifyCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ModifyCommentLambdaVersionVOQk8UXwgLakpAvcqGYybAWVvw0Rgf1BI6x9v3kVlI"
            }
          },
          "DeleteCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCommentLambdaVersionzQpEn1Mik4chBE3UIYHsT81cXr3tyrtCf2n2ixdZ4"
            }
          },
          "GetReplyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetReplyLambdaVersioni1h3weT1Jtt3BlvTI3hSsYARRsqQlgK1qrbDGLOs"
            }
          },
          "ImageResizeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ImageResizeLambdaVersionTNPuxBUqM54ciTSGxT5Sylqn8oiPYMNdDtHcSZ31iU"
            }
          },
          "OnConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnConnectLambdaVersion6SyNDg6g6swOxTe6l1azXwngoCOpUB3JHZVE5VSs"
            }
          },
          "OnConnect2LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnConnect2LambdaVersionTY34JJo5Lav9pXBkGdi8azfpxL9dLDNpMrGn4V32E"
            }
          },
          "OnDisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnDisconnectLambdaVersionb7U5YsnrqtYDrnslr5g2Ur1xIzY3ligjC6I8qTU8"
            }
          },
          "OnDefaultLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnDefaultLambdaVersionMRnYKmyhvKIoFPz5v8R8sKERVSVLHnCCIRdFt6hqQ"
            }
          },
          "OnSendMessageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnSendMessageLambdaVersiongc7Qj7XQAgbo6u9rsFc6KTOwH3NTaJqsL0NQ2gGfo"
            }
          },
          "GetChatRoomListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetChatRoomListLambdaVersionqR3aq1L8t36TaLMs1rWM4aX4AeV9WvmUzEsP7fUpY"
            }
          },
          "GetChatContentListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetChatContentListLambdaVersionk9aPo5CBjqsEJOEVoiWiBTpBqacIVKyZ6fPX3KlY"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": {
          "forceInclude": [
            "mysql"
          ]
        },
        "packager": "npm"
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-dotenv-plugin",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "handler.hello",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "hello",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-hello",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "HelloLambdaVersionG9Ol411KSKszGJRWCAHxdTBoTUgYrQgLPioGwSKVCDI"
      },
      "createPost": {
        "handler": "services/post/handler.createPost",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "post/createPost",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-createPost",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreatePostLambdaVersionWeL0c26j0TUYrNzL1vPwSYVcdKQA8GcVUzZ3NCd5A"
      },
      "createBusiness": {
        "handler": "services/business/handler.createBusiness",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "post/createBusiness",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-createBusiness",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateBusinessLambdaVersionloxo8l8cDgVq3GrXVbUVMYnGmNp3Swx9YmuBwDIibmY"
      },
      "getPost": {
        "handler": "services/post/handler.getPost",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "post/{postId}/getPost",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.postId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getPost",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetPostLambdaVersionp7dHIjJVaUjN9vmfmn487VIfou5cbOnMQ907UpTAI"
      },
      "getBusiness": {
        "handler": "services/business/handler.getBusiness",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "post/{postId}/getBusiness",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.postId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getBusiness",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetBusinessLambdaVersionR2fzfVU782lQebvTEs7tkyngT4hT6wSp4mCydAy5E"
      },
      "hidePost": {
        "handler": "services/post/handler.hidePost",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "post/{postId}/hidePost",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.postId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-hidePost",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "HidePostLambdaVersioneuYXMvMN0yFP8XJFDsFlkKxVjnafJvz4zM7N9m9lXyg"
      },
      "boostPost": {
        "handler": "services/post/handler.boostPost",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "post/{postId}/boostPost",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.postId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-boostPost",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "BoostPostLambdaVersiony953zuNfFSMlNy1eTqbYGaU60nIKLgsbUiYwk4PfQk"
      },
      "deletePost": {
        "handler": "services/post/handler.deletePost",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "post/{postId}/deletePost",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.postId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-deletePost",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeletePostLambdaVersionoKEsTjtq6ebzbe1Bw9FSovtn9d8AYN2MBIRsP4xDUw"
      },
      "getFeed": {
        "handler": "services/feed/handler.getFeed",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "feed/getFeed",
              "request": {
                "parameters": {
                  "method.request.querystring.offset": false,
                  "method.request.querystring.limit": false,
                  "method.request.querystring.order": false,
                  "method.request.querystring.type": false
                }
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getFeed",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetFeedLambdaVersionGDX1GfExCnSOuUEk1tPDvbhS15aX5eJsgXdTh2HuWQ"
      },
      "getCategoryFeed": {
        "handler": "services/feed/handler.getCategoryFeed",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "feed/getCategoryFeed",
              "request": {
                "parameters": {
                  "method.request.querystring.offset": false,
                  "method.request.querystring.limit": false
                }
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getCategoryFeed",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetCategoryFeedLambdaVersionXLeqQPvws1XLWM7txyyoFzJU0IFlrNxghR99DweXh0"
      },
      "getSearchFeed": {
        "handler": "services/feed/handler.getSearchFeed",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "feed/getSearchFeed",
              "request": {
                "parameters": {
                  "method.request.querystring.offset": false,
                  "method.request.querystring.limit": false
                }
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getSearchFeed",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetSearchFeedLambdaVersionBVzotbO4KCWZVhwY4q5vhuKHha0XWLfzTaUUqQLQ"
      },
      "getBusinessFeed": {
        "handler": "services/feed/handler.getBusinessFeed",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "feed/getBusinessFeed",
              "request": {
                "parameters": {
                  "method.request.querystring.offset": false,
                  "method.request.querystring.limit": false,
                  "method.request.querystring.order": false
                }
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getBusinessFeed",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetBusinessFeedLambdaVersionGdfDsbWW6HzlbRpvkf5jLvc3jwetEzqahAM2OD8M"
      },
      "addComment": {
        "handler": "services/comment/handler.addComment",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "comment/{postId}/addComment",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.postId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-addComment",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddCommentLambdaVersionnm4aduo2hwnEAMYfNTHEp8pfzJE7o1bilikngyeZig"
      },
      "getComment": {
        "handler": "services/comment/handler.getComment",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "comment/{postId}/getComment",
              "request": {
                "parameters": {
                  "method.request.querystring.offset": false,
                  "method.request.querystring.limit": false,
                  "method.request.querystring.order": false,
                  "method.request.path.postId": true
                }
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getComment",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetCommentLambdaVersionZRGj2w2RFCgeFpU2w7uPxayJJVMNJ6DKocbUqvIfkk"
      },
      "modifyComment": {
        "handler": "services/comment/handler.modifyComment",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "comment/{commentId}/modifyComment",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.commentId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-modifyComment",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ModifyCommentLambdaVersionVOQk8UXwgLakpAvcqGYybAWVvw0Rgf1BI6x9v3kVlI"
      },
      "deleteComment": {
        "handler": "services/comment/handler.deleteComment",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "comment/{commentId}/deleteComment",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.commentId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-deleteComment",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteCommentLambdaVersionzQpEn1Mik4chBE3UIYHsT81cXr3tyrtCf2n2ixdZ4"
      },
      "getReply": {
        "handler": "services/comment/handler.getReply",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "comment/{postId}/{commentId}/getReply",
              "request": {
                "parameters": {
                  "method.request.querystring.offset": false,
                  "method.request.querystring.limit": false,
                  "method.request.querystring.order": false,
                  "method.request.path.postId": true,
                  "method.request.path.commentId": true
                }
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getReply",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetReplyLambdaVersioni1h3weT1Jtt3BlvTI3hSsYARRsqQlgK1qrbDGLOs"
      },
      "imageResize": {
        "handler": "services/post/handler.imageResize",
        "events": [],
        "name": "goodneibors-prod-imageResize",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ImageResizeLambdaVersionTNPuxBUqM54ciTSGxT5Sylqn8oiPYMNdDtHcSZ31iU"
      },
      "onConnect": {
        "handler": "services/chat-socket/handler.onConnect",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          }
        ],
        "name": "goodneibors-prod-onConnect",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "OnConnectLambdaVersion6SyNDg6g6swOxTe6l1azXwngoCOpUB3JHZVE5VSs"
      },
      "onConnect2": {
        "handler": "services/chat-socket/handler.onConnect2",
        "events": [
          {
            "websocket": {
              "route": "connect2"
            }
          }
        ],
        "name": "goodneibors-prod-onConnect2",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "OnConnect2LambdaVersionTY34JJo5Lav9pXBkGdi8azfpxL9dLDNpMrGn4V32E"
      },
      "onDisconnect": {
        "handler": "services/chat-socket/handler.onDisconnect",
        "events": [
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "goodneibors-prod-onDisconnect",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "OnDisconnectLambdaVersionb7U5YsnrqtYDrnslr5g2Ur1xIzY3ligjC6I8qTU8"
      },
      "onDefault": {
        "handler": "services/chat-socket/handler.onDefault",
        "events": [
          {
            "websocket": {
              "route": "$default"
            }
          }
        ],
        "name": "goodneibors-prod-onDefault",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "OnDefaultLambdaVersionMRnYKmyhvKIoFPz5v8R8sKERVSVLHnCCIRdFt6hqQ"
      },
      "onSendMessage": {
        "handler": "services/chat-socket/handler.onSendMessage",
        "events": [
          {
            "websocket": {
              "route": "onSendMessage"
            }
          }
        ],
        "name": "goodneibors-prod-onSendMessage",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "OnSendMessageLambdaVersiongc7Qj7XQAgbo6u9rsFc6KTOwH3NTaJqsL0NQ2gGfo"
      },
      "getChatRoomList": {
        "handler": "services/chat-socket/handler.getChatRoomList",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "chat/getChatRoomList",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getChatRoomList",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetChatRoomListLambdaVersionqR3aq1L8t36TaLMs1rWM4aX4AeV9WvmUzEsP7fUpY"
      },
      "getChatContentList": {
        "handler": "services/chat-socket/handler.getChatContentList",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "chat/{receiveId}/getChatContentList",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.querystring.offset": false,
                  "method.request.querystring.limit": false,
                  "method.request.path.receiveId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "goodneibors-prod-getChatContentList",
        "package": {
          "artifact": ".serverless/goodneibors.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetChatContentListLambdaVersionk9aPo5CBjqsEJOEVoiWiBTpBqacIVKyZ6fPX3KlY"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.ts",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/goodneibors/prod/1609836903702-2021-01-05T08:55:03.702Z",
    "artifact": ""
  }
}